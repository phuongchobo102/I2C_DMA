
SMBUS_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033b8  080033b8  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  080033b8  080033b8  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033b8  080033b8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033bc  080033bc  000133bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080033c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000094  08003454  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003454  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006b16  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016e4  00000000  00000000  00026c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  00028300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000540  00000000  00000000  000289e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ef3f  00000000  00000000  00028f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009766  00000000  00000000  00037e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000597c1  00000000  00000000  000415cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001790  00000000  00000000  0009ad90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0009c520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000094 	.word	0x20000094
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003370 	.word	0x08003370

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000098 	.word	0x20000098
 8000104:	08003370 	.word	0x08003370

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
int counter=0;
int last_time_send_edid=0;
static uint8_t i=128;
int counter2=0;
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 faac 	bl	8000780 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f82a 	bl	8000280 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8c8 	bl	80003c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f8a8 	bl	8000384 <MX_DMA_Init>
  MX_I2C2_Init();
 8000234:	f000 f864 	bl	8000300 <MX_I2C2_Init>
//  HAL_I2C_Slave_Transmit_DMA( &hi2c2 , atest_edid_sub  , 128);
  HAL_I2C_Slave_Receive_DMA(&hi2c2,buffer_rx , 1);
 8000238:	4903      	ldr	r1, [pc, #12]	; (8000248 <main+0x28>)
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <main+0x2c>)
 800023c:	2201      	movs	r2, #1
 800023e:	0018      	movs	r0, r3
 8000240:	f001 f8ec 	bl	800141c <HAL_I2C_Slave_Receive_DMA>
//  HAL_I2C_Slave_Transmit_DMA( &hi2c2 , atest_edid_sub  , 128);
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  while(1)
 8000244:	e7fe      	b.n	8000244 <main+0x24>
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	20000080 	.word	0x20000080
 800024c:	200000b0 	.word	0x200000b0

08000250 <HAL_I2C_SlaveRxCpltCallback>:
//void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
//{
//	counter++;
//}
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	HAL_I2C_Slave_Transmit_DMA( &hi2c2 , atest_edid_sub + buffer_rx[0]  , 128);
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	001a      	movs	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8000260:	18d1      	adds	r1, r2, r3
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 8000264:	2280      	movs	r2, #128	; 0x80
 8000266:	0018      	movs	r0, r3
 8000268:	f000 ffda 	bl	8001220 <HAL_I2C_Slave_Transmit_DMA>
//	while(hi2c->State!=HAL_I2C_STATE_READY);
}
 800026c:	46c0      	nop			; (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	b002      	add	sp, #8
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000080 	.word	0x20000080
 8000278:	20000000 	.word	0x20000000
 800027c:	200000b0 	.word	0x200000b0

08000280 <SystemClock_Config>:
//void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
//{
//	HAL_I2C_Slave_Receive_DMA(&hi2c2, buffer_rx , 1);
//}
void SystemClock_Config(void)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b091      	sub	sp, #68	; 0x44
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	2410      	movs	r4, #16
 8000288:	193b      	adds	r3, r7, r4
 800028a:	0018      	movs	r0, r3
 800028c:	2330      	movs	r3, #48	; 0x30
 800028e:	001a      	movs	r2, r3
 8000290:	2100      	movs	r1, #0
 8000292:	f003 f841 	bl	8003318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000296:	003b      	movs	r3, r7
 8000298:	0018      	movs	r0, r3
 800029a:	2310      	movs	r3, #16
 800029c:	001a      	movs	r2, r3
 800029e:	2100      	movs	r1, #0
 80002a0:	f003 f83a 	bl	8003318 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a4:	0021      	movs	r1, r4
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2202      	movs	r2, #2
 80002aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2201      	movs	r2, #1
 80002b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2210      	movs	r2, #16
 80002b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2200      	movs	r2, #0
 80002bc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	0018      	movs	r0, r3
 80002c2:	f002 fbe5 	bl	8002a90 <HAL_RCC_OscConfig>
 80002c6:	1e03      	subs	r3, r0, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002ca:	f000 f91b 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	003b      	movs	r3, r7
 80002d0:	2207      	movs	r2, #7
 80002d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d4:	003b      	movs	r3, r7
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	003b      	movs	r3, r7
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e0:	003b      	movs	r3, r7
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e6:	003b      	movs	r3, r7
 80002e8:	2100      	movs	r1, #0
 80002ea:	0018      	movs	r0, r3
 80002ec:	f002 feee 	bl	80030cc <HAL_RCC_ClockConfig>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002f4:	f000 f906 	bl	8000504 <Error_Handler>
  }
}
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	b011      	add	sp, #68	; 0x44
 80002fe:	bd90      	pop	{r4, r7, pc}

08000300 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000304:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <MX_I2C2_Init+0x78>)
 8000306:	4a1d      	ldr	r2, [pc, #116]	; (800037c <MX_I2C2_Init+0x7c>)
 8000308:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800030a:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_I2C2_Init+0x78>)
 800030c:	4a1c      	ldr	r2, [pc, #112]	; (8000380 <MX_I2C2_Init+0x80>)
 800030e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 160;
 8000310:	4b19      	ldr	r3, [pc, #100]	; (8000378 <MX_I2C2_Init+0x78>)
 8000312:	22a0      	movs	r2, #160	; 0xa0
 8000314:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_I2C2_Init+0x78>)
 8000318:	2201      	movs	r2, #1
 800031a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800031c:	4b16      	ldr	r3, [pc, #88]	; (8000378 <MX_I2C2_Init+0x78>)
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_I2C2_Init+0x78>)
 8000324:	2200      	movs	r2, #0
 8000326:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MX_I2C2_Init+0x78>)
 800032a:	2200      	movs	r2, #0
 800032c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_I2C2_Init+0x78>)
 8000330:	2200      	movs	r2, #0
 8000332:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000334:	4b10      	ldr	r3, [pc, #64]	; (8000378 <MX_I2C2_Init+0x78>)
 8000336:	2280      	movs	r2, #128	; 0x80
 8000338:	0292      	lsls	r2, r2, #10
 800033a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_I2C2_Init+0x78>)
 800033e:	0018      	movs	r0, r3
 8000340:	f000 fed8 	bl	80010f4 <HAL_I2C_Init>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000348:	f000 f8dc 	bl	8000504 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <MX_I2C2_Init+0x78>)
 800034e:	2100      	movs	r1, #0
 8000350:	0018      	movs	r0, r3
 8000352:	f002 fb05 	bl	8002960 <HAL_I2CEx_ConfigAnalogFilter>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800035a:	f000 f8d3 	bl	8000504 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_I2C2_Init+0x78>)
 8000360:	2100      	movs	r1, #0
 8000362:	0018      	movs	r0, r3
 8000364:	f002 fb48 	bl	80029f8 <HAL_I2CEx_ConfigDigitalFilter>
 8000368:	1e03      	subs	r3, r0, #0
 800036a:	d001      	beq.n	8000370 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800036c:	f000 f8ca 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */

}
 8000370:	46c0      	nop			; (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	200000b0 	.word	0x200000b0
 800037c:	40005800 	.word	0x40005800
 8000380:	2000090e 	.word	0x2000090e

08000384 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_DMA_Init+0x38>)
 800038c:	695a      	ldr	r2, [r3, #20]
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <MX_DMA_Init+0x38>)
 8000390:	2101      	movs	r1, #1
 8000392:	430a      	orrs	r2, r1
 8000394:	615a      	str	r2, [r3, #20]
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_DMA_Init+0x38>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	2201      	movs	r2, #1
 800039c:	4013      	ands	r3, r2
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2100      	movs	r1, #0
 80003a6:	200b      	movs	r0, #11
 80003a8:	f000 fafa 	bl	80009a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80003ac:	200b      	movs	r0, #11
 80003ae:	f000 fb0c 	bl	80009ca <HAL_NVIC_EnableIRQ>

}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b002      	add	sp, #8
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	40021000 	.word	0x40021000

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b089      	sub	sp, #36	; 0x24
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	240c      	movs	r4, #12
 80003c8:	193b      	adds	r3, r7, r4
 80003ca:	0018      	movs	r0, r3
 80003cc:	2314      	movs	r3, #20
 80003ce:	001a      	movs	r2, r3
 80003d0:	2100      	movs	r1, #0
 80003d2:	f002 ffa1 	bl	8003318 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b49      	ldr	r3, [pc, #292]	; (80004fc <MX_GPIO_Init+0x13c>)
 80003d8:	695a      	ldr	r2, [r3, #20]
 80003da:	4b48      	ldr	r3, [pc, #288]	; (80004fc <MX_GPIO_Init+0x13c>)
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	0289      	lsls	r1, r1, #10
 80003e0:	430a      	orrs	r2, r1
 80003e2:	615a      	str	r2, [r3, #20]
 80003e4:	4b45      	ldr	r3, [pc, #276]	; (80004fc <MX_GPIO_Init+0x13c>)
 80003e6:	695a      	ldr	r2, [r3, #20]
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	029b      	lsls	r3, r3, #10
 80003ec:	4013      	ands	r3, r2
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f2:	4b42      	ldr	r3, [pc, #264]	; (80004fc <MX_GPIO_Init+0x13c>)
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	4b41      	ldr	r3, [pc, #260]	; (80004fc <MX_GPIO_Init+0x13c>)
 80003f8:	2180      	movs	r1, #128	; 0x80
 80003fa:	02c9      	lsls	r1, r1, #11
 80003fc:	430a      	orrs	r2, r1
 80003fe:	615a      	str	r2, [r3, #20]
 8000400:	4b3e      	ldr	r3, [pc, #248]	; (80004fc <MX_GPIO_Init+0x13c>)
 8000402:	695a      	ldr	r2, [r3, #20]
 8000404:	2380      	movs	r3, #128	; 0x80
 8000406:	02db      	lsls	r3, r3, #11
 8000408:	4013      	ands	r3, r2
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800040e:	2380      	movs	r3, #128	; 0x80
 8000410:	01db      	lsls	r3, r3, #7
 8000412:	483b      	ldr	r0, [pc, #236]	; (8000500 <MX_GPIO_Init+0x140>)
 8000414:	2200      	movs	r2, #0
 8000416:	0019      	movs	r1, r3
 8000418:	f000 fe4e 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	0119      	lsls	r1, r3, #4
 8000420:	2390      	movs	r3, #144	; 0x90
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	2200      	movs	r2, #0
 8000426:	0018      	movs	r0, r3
 8000428:	f000 fe46 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800042c:	193b      	adds	r3, r7, r4
 800042e:	2202      	movs	r2, #2
 8000430:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000432:	193b      	adds	r3, r7, r4
 8000434:	2200      	movs	r2, #0
 8000436:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	193b      	adds	r3, r7, r4
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043e:	193a      	adds	r2, r7, r4
 8000440:	2390      	movs	r3, #144	; 0x90
 8000442:	05db      	lsls	r3, r3, #23
 8000444:	0011      	movs	r1, r2
 8000446:	0018      	movs	r0, r3
 8000448:	f000 fcc6 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800044c:	0021      	movs	r1, r4
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2280      	movs	r2, #128	; 0x80
 8000452:	0192      	lsls	r2, r2, #6
 8000454:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000456:	000c      	movs	r4, r1
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2200      	movs	r2, #0
 800045c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	193b      	adds	r3, r7, r4
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000464:	193b      	adds	r3, r7, r4
 8000466:	4a26      	ldr	r2, [pc, #152]	; (8000500 <MX_GPIO_Init+0x140>)
 8000468:	0019      	movs	r1, r3
 800046a:	0010      	movs	r0, r2
 800046c:	f000 fcb4 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000470:	0021      	movs	r1, r4
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	01d2      	lsls	r2, r2, #7
 8000478:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	000c      	movs	r4, r1
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2201      	movs	r2, #1
 8000480:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	193b      	adds	r3, r7, r4
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048e:	193b      	adds	r3, r7, r4
 8000490:	4a1b      	ldr	r2, [pc, #108]	; (8000500 <MX_GPIO_Init+0x140>)
 8000492:	0019      	movs	r1, r3
 8000494:	0010      	movs	r0, r2
 8000496:	f000 fc9f 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800049a:	0021      	movs	r1, r4
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	0112      	lsls	r2, r2, #4
 80004a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	000c      	movs	r4, r1
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	2201      	movs	r2, #1
 80004aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	193a      	adds	r2, r7, r4
 80004ba:	2390      	movs	r3, #144	; 0x90
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	0011      	movs	r1, r2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fc89 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004c6:	0021      	movs	r1, r4
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	22c0      	movs	r2, #192	; 0xc0
 80004cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2212      	movs	r2, #18
 80004d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2203      	movs	r2, #3
 80004de:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2201      	movs	r2, #1
 80004e4:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <MX_GPIO_Init+0x140>)
 80004ea:	0019      	movs	r1, r3
 80004ec:	0010      	movs	r0, r2
 80004ee:	f000 fc73 	bl	8000dd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b009      	add	sp, #36	; 0x24
 80004f8:	bd90      	pop	{r4, r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	40021000 	.word	0x40021000
 8000500:	48000400 	.word	0x48000400

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_MspInit+0x44>)
 8000518:	699a      	ldr	r2, [r3, #24]
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_MspInit+0x44>)
 800051c:	2101      	movs	r1, #1
 800051e:	430a      	orrs	r2, r1
 8000520:	619a      	str	r2, [r3, #24]
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_MspInit+0x44>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	2201      	movs	r2, #1
 8000528:	4013      	ands	r3, r2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_MspInit+0x44>)
 8000530:	69da      	ldr	r2, [r3, #28]
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_MspInit+0x44>)
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	0549      	lsls	r1, r1, #21
 8000538:	430a      	orrs	r2, r1
 800053a:	61da      	str	r2, [r3, #28]
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <HAL_MspInit+0x44>)
 800053e:	69da      	ldr	r2, [r3, #28]
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	055b      	lsls	r3, r3, #21
 8000544:	4013      	ands	r3, r2
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b08b      	sub	sp, #44	; 0x2c
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	2414      	movs	r4, #20
 8000562:	193b      	adds	r3, r7, r4
 8000564:	0018      	movs	r0, r3
 8000566:	2314      	movs	r3, #20
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f002 fed4 	bl	8003318 <memset>
  if(hi2c->Instance==I2C2)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a48      	ldr	r2, [pc, #288]	; (8000698 <HAL_I2C_MspInit+0x140>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d000      	beq.n	800057c <HAL_I2C_MspInit+0x24>
 800057a:	e088      	b.n	800068e <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	4b47      	ldr	r3, [pc, #284]	; (800069c <HAL_I2C_MspInit+0x144>)
 800057e:	695a      	ldr	r2, [r3, #20]
 8000580:	4b46      	ldr	r3, [pc, #280]	; (800069c <HAL_I2C_MspInit+0x144>)
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	02c9      	lsls	r1, r1, #11
 8000586:	430a      	orrs	r2, r1
 8000588:	615a      	str	r2, [r3, #20]
 800058a:	4b44      	ldr	r3, [pc, #272]	; (800069c <HAL_I2C_MspInit+0x144>)
 800058c:	695a      	ldr	r2, [r3, #20]
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	02db      	lsls	r3, r3, #11
 8000592:	4013      	ands	r3, r2
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	22c0      	movs	r2, #192	; 0xc0
 800059c:	0112      	lsls	r2, r2, #4
 800059e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005a0:	0021      	movs	r1, r4
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2212      	movs	r2, #18
 80005a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2203      	movs	r2, #3
 80005b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2201      	movs	r2, #1
 80005b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	4a38      	ldr	r2, [pc, #224]	; (80006a0 <HAL_I2C_MspInit+0x148>)
 80005be:	0019      	movs	r1, r3
 80005c0:	0010      	movs	r0, r2
 80005c2:	f000 fc09 	bl	8000dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80005c6:	4b35      	ldr	r3, [pc, #212]	; (800069c <HAL_I2C_MspInit+0x144>)
 80005c8:	69da      	ldr	r2, [r3, #28]
 80005ca:	4b34      	ldr	r3, [pc, #208]	; (800069c <HAL_I2C_MspInit+0x144>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	03c9      	lsls	r1, r1, #15
 80005d0:	430a      	orrs	r2, r1
 80005d2:	61da      	str	r2, [r3, #28]
 80005d4:	4b31      	ldr	r3, [pc, #196]	; (800069c <HAL_I2C_MspInit+0x144>)
 80005d6:	69da      	ldr	r2, [r3, #28]
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	03db      	lsls	r3, r3, #15
 80005dc:	4013      	ands	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80005e2:	4b30      	ldr	r3, [pc, #192]	; (80006a4 <HAL_I2C_MspInit+0x14c>)
 80005e4:	4a30      	ldr	r2, [pc, #192]	; (80006a8 <HAL_I2C_MspInit+0x150>)
 80005e6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005e8:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <HAL_I2C_MspInit+0x14c>)
 80005ea:	2210      	movs	r2, #16
 80005ec:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ee:	4b2d      	ldr	r3, [pc, #180]	; (80006a4 <HAL_I2C_MspInit+0x14c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <HAL_I2C_MspInit+0x14c>)
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005fa:	4b2a      	ldr	r3, [pc, #168]	; (80006a4 <HAL_I2C_MspInit+0x14c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <HAL_I2C_MspInit+0x14c>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_CIRCULAR;
 8000606:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <HAL_I2C_MspInit+0x14c>)
 8000608:	2220      	movs	r2, #32
 800060a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <HAL_I2C_MspInit+0x14c>)
 800060e:	22c0      	movs	r2, #192	; 0xc0
 8000610:	0192      	lsls	r2, r2, #6
 8000612:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <HAL_I2C_MspInit+0x14c>)
 8000616:	0018      	movs	r0, r3
 8000618:	f000 f9f4 	bl	8000a04 <HAL_DMA_Init>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000620:	f7ff ff70 	bl	8000504 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <HAL_I2C_MspInit+0x14c>)
 8000628:	639a      	str	r2, [r3, #56]	; 0x38
 800062a:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <HAL_I2C_MspInit+0x14c>)
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <HAL_I2C_MspInit+0x154>)
 8000632:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <HAL_I2C_MspInit+0x158>)
 8000634:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <HAL_I2C_MspInit+0x154>)
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <HAL_I2C_MspInit+0x154>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <HAL_I2C_MspInit+0x154>)
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <HAL_I2C_MspInit+0x154>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_I2C_MspInit+0x154>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <HAL_I2C_MspInit+0x154>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <HAL_I2C_MspInit+0x154>)
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	0192      	lsls	r2, r2, #6
 8000660:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_I2C_MspInit+0x154>)
 8000664:	0018      	movs	r0, r3
 8000666:	f000 f9cd 	bl	8000a04 <HAL_DMA_Init>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <HAL_I2C_MspInit+0x11a>
    {
      Error_Handler();
 800066e:	f7ff ff49 	bl	8000504 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <HAL_I2C_MspInit+0x154>)
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <HAL_I2C_MspInit+0x154>)
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	2018      	movs	r0, #24
 8000684:	f000 f98c 	bl	80009a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8000688:	2018      	movs	r0, #24
 800068a:	f000 f99e 	bl	80009ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b00b      	add	sp, #44	; 0x2c
 8000694:	bd90      	pop	{r4, r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40005800 	.word	0x40005800
 800069c:	40021000 	.word	0x40021000
 80006a0:	48000400 	.word	0x48000400
 80006a4:	20000108 	.word	0x20000108
 80006a8:	40020044 	.word	0x40020044
 80006ac:	2000014c 	.word	0x2000014c
 80006b0:	40020058 	.word	0x40020058

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <NMI_Handler+0x4>

080006ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler+0x4>

080006c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d8:	f000 f89a 	bl	8000810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <DMA1_Channel4_5_IRQHandler+0x1c>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fa7d 	bl	8000bea <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <DMA1_Channel4_5_IRQHandler+0x20>)
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fa79 	bl	8000bea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	20000108 	.word	0x20000108
 8000704:	2000014c 	.word	0x2000014c

08000708 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */

    HAL_I2C_EV_IRQHandler(&hi2c2);
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <I2C2_IRQHandler+0x14>)
 800070e:	0018      	movs	r0, r3
 8000710:	f000 ff48 	bl	80015a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	200000b0 	.word	0x200000b0

08000720 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800072e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000730:	f7ff fff6 	bl	8000720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <LoopForever+0x6>)
  ldr r1, =_edata
 8000736:	490d      	ldr	r1, [pc, #52]	; (800076c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <LoopForever+0xe>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800074c:	4c0a      	ldr	r4, [pc, #40]	; (8000778 <LoopForever+0x16>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800075a:	f002 fde5 	bl	8003328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075e:	f7ff fd5f 	bl	8000220 <main>

08000762 <LoopForever>:

LoopForever:
    b LoopForever
 8000762:	e7fe      	b.n	8000762 <LoopForever>
  ldr   r0, =_estack
 8000764:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800076c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000770:	080033c0 	.word	0x080033c0
  ldr r2, =_sbss
 8000774:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000778:	20000194 	.word	0x20000194

0800077c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC1_IRQHandler>
	...

08000780 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <HAL_Init+0x24>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_Init+0x24>)
 800078a:	2110      	movs	r1, #16
 800078c:	430a      	orrs	r2, r1
 800078e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f809 	bl	80007a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000796:	f7ff febb 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800079a:	2300      	movs	r3, #0
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40022000 	.word	0x40022000

080007a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <HAL_InitTick+0x5c>)
 80007b2:	681c      	ldr	r4, [r3, #0]
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <HAL_InitTick+0x60>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	0019      	movs	r1, r3
 80007ba:	23fa      	movs	r3, #250	; 0xfa
 80007bc:	0098      	lsls	r0, r3, #2
 80007be:	f7ff fca3 	bl	8000108 <__udivsi3>
 80007c2:	0003      	movs	r3, r0
 80007c4:	0019      	movs	r1, r3
 80007c6:	0020      	movs	r0, r4
 80007c8:	f7ff fc9e 	bl	8000108 <__udivsi3>
 80007cc:	0003      	movs	r3, r0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 f90b 	bl	80009ea <HAL_SYSTICK_Config>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	e00f      	b.n	80007fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d80b      	bhi.n	80007fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	2301      	movs	r3, #1
 80007e6:	425b      	negs	r3, r3
 80007e8:	2200      	movs	r2, #0
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 f8d8 	bl	80009a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_InitTick+0x64>)
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e000      	b.n	80007fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	0018      	movs	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	b003      	add	sp, #12
 8000802:	bd90      	pop	{r4, r7, pc}
 8000804:	20000088 	.word	0x20000088
 8000808:	20000090 	.word	0x20000090
 800080c:	2000008c 	.word	0x2000008c

08000810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x1c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	001a      	movs	r2, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_IncTick+0x20>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	18d2      	adds	r2, r2, r3
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_IncTick+0x20>)
 8000822:	601a      	str	r2, [r3, #0]
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	20000090 	.word	0x20000090
 8000830:	20000190 	.word	0x20000190

08000834 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b02      	ldr	r3, [pc, #8]	; (8000844 <HAL_GetTick+0x10>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	0018      	movs	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	20000190 	.word	0x20000190

08000848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	0002      	movs	r2, r0
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b7f      	cmp	r3, #127	; 0x7f
 800085a:	d809      	bhi.n	8000870 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	001a      	movs	r2, r3
 8000862:	231f      	movs	r3, #31
 8000864:	401a      	ands	r2, r3
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <__NVIC_EnableIRQ+0x30>)
 8000868:	2101      	movs	r1, #1
 800086a:	4091      	lsls	r1, r2
 800086c:	000a      	movs	r2, r1
 800086e:	601a      	str	r2, [r3, #0]
  }
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}
 8000878:	e000e100 	.word	0xe000e100

0800087c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	0002      	movs	r2, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b7f      	cmp	r3, #127	; 0x7f
 8000890:	d828      	bhi.n	80008e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000892:	4a2f      	ldr	r2, [pc, #188]	; (8000950 <__NVIC_SetPriority+0xd4>)
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b25b      	sxtb	r3, r3
 800089a:	089b      	lsrs	r3, r3, #2
 800089c:	33c0      	adds	r3, #192	; 0xc0
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	589b      	ldr	r3, [r3, r2]
 80008a2:	1dfa      	adds	r2, r7, #7
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	0011      	movs	r1, r2
 80008a8:	2203      	movs	r2, #3
 80008aa:	400a      	ands	r2, r1
 80008ac:	00d2      	lsls	r2, r2, #3
 80008ae:	21ff      	movs	r1, #255	; 0xff
 80008b0:	4091      	lsls	r1, r2
 80008b2:	000a      	movs	r2, r1
 80008b4:	43d2      	mvns	r2, r2
 80008b6:	401a      	ands	r2, r3
 80008b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	019b      	lsls	r3, r3, #6
 80008be:	22ff      	movs	r2, #255	; 0xff
 80008c0:	401a      	ands	r2, r3
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	0018      	movs	r0, r3
 80008c8:	2303      	movs	r3, #3
 80008ca:	4003      	ands	r3, r0
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d0:	481f      	ldr	r0, [pc, #124]	; (8000950 <__NVIC_SetPriority+0xd4>)
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	089b      	lsrs	r3, r3, #2
 80008da:	430a      	orrs	r2, r1
 80008dc:	33c0      	adds	r3, #192	; 0xc0
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008e2:	e031      	b.n	8000948 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e4:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <__NVIC_SetPriority+0xd8>)
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	0019      	movs	r1, r3
 80008ec:	230f      	movs	r3, #15
 80008ee:	400b      	ands	r3, r1
 80008f0:	3b08      	subs	r3, #8
 80008f2:	089b      	lsrs	r3, r3, #2
 80008f4:	3306      	adds	r3, #6
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	18d3      	adds	r3, r2, r3
 80008fa:	3304      	adds	r3, #4
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	1dfa      	adds	r2, r7, #7
 8000900:	7812      	ldrb	r2, [r2, #0]
 8000902:	0011      	movs	r1, r2
 8000904:	2203      	movs	r2, #3
 8000906:	400a      	ands	r2, r1
 8000908:	00d2      	lsls	r2, r2, #3
 800090a:	21ff      	movs	r1, #255	; 0xff
 800090c:	4091      	lsls	r1, r2
 800090e:	000a      	movs	r2, r1
 8000910:	43d2      	mvns	r2, r2
 8000912:	401a      	ands	r2, r3
 8000914:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	019b      	lsls	r3, r3, #6
 800091a:	22ff      	movs	r2, #255	; 0xff
 800091c:	401a      	ands	r2, r3
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	0018      	movs	r0, r3
 8000924:	2303      	movs	r3, #3
 8000926:	4003      	ands	r3, r0
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800092c:	4809      	ldr	r0, [pc, #36]	; (8000954 <__NVIC_SetPriority+0xd8>)
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	001c      	movs	r4, r3
 8000934:	230f      	movs	r3, #15
 8000936:	4023      	ands	r3, r4
 8000938:	3b08      	subs	r3, #8
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	430a      	orrs	r2, r1
 800093e:	3306      	adds	r3, #6
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	18c3      	adds	r3, r0, r3
 8000944:	3304      	adds	r3, #4
 8000946:	601a      	str	r2, [r3, #0]
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b003      	add	sp, #12
 800094e:	bd90      	pop	{r4, r7, pc}
 8000950:	e000e100 	.word	0xe000e100
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	1e5a      	subs	r2, r3, #1
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	045b      	lsls	r3, r3, #17
 8000968:	429a      	cmp	r2, r3
 800096a:	d301      	bcc.n	8000970 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096c:	2301      	movs	r3, #1
 800096e:	e010      	b.n	8000992 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <SysTick_Config+0x44>)
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	3a01      	subs	r2, #1
 8000976:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000978:	2301      	movs	r3, #1
 800097a:	425b      	negs	r3, r3
 800097c:	2103      	movs	r1, #3
 800097e:	0018      	movs	r0, r3
 8000980:	f7ff ff7c 	bl	800087c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <SysTick_Config+0x44>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <SysTick_Config+0x44>)
 800098c:	2207      	movs	r2, #7
 800098e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000990:	2300      	movs	r3, #0
}
 8000992:	0018      	movs	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	b002      	add	sp, #8
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	e000e010 	.word	0xe000e010

080009a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	210f      	movs	r1, #15
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	1c02      	adds	r2, r0, #0
 80009b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f7ff ff5d 	bl	800087c <__NVIC_SetPriority>
}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b004      	add	sp, #16
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	0002      	movs	r2, r0
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	b25b      	sxtb	r3, r3
 80009dc:	0018      	movs	r0, r3
 80009de:	f7ff ff33 	bl	8000848 <__NVIC_EnableIRQ>
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b002      	add	sp, #8
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff ffaf 	bl	8000958 <SysTick_Config>
 80009fa:	0003      	movs	r3, r0
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d101      	bne.n	8000a1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e036      	b.n	8000a88 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2221      	movs	r2, #33	; 0x21
 8000a1e:	2102      	movs	r1, #2
 8000a20:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <HAL_DMA_Init+0x8c>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 f998 	bl	8000da0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2221      	movs	r2, #33	; 0x21
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2220      	movs	r2, #32
 8000a82:	2100      	movs	r1, #0
 8000a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b004      	add	sp, #16
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	ffffc00f 	.word	0xffffc00f

08000a94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
 8000aa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000aa2:	2317      	movs	r3, #23
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2220      	movs	r2, #32
 8000aae:	5c9b      	ldrb	r3, [r3, r2]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d101      	bne.n	8000ab8 <HAL_DMA_Start_IT+0x24>
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	e04f      	b.n	8000b58 <HAL_DMA_Start_IT+0xc4>
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2220      	movs	r2, #32
 8000abc:	2101      	movs	r1, #1
 8000abe:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2221      	movs	r2, #33	; 0x21
 8000ac4:	5c9b      	ldrb	r3, [r3, r2]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d13a      	bne.n	8000b42 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2221      	movs	r2, #33	; 0x21
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	438a      	bics	r2, r1
 8000ae8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	68b9      	ldr	r1, [r7, #8]
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f000 f928 	bl	8000d46 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d008      	beq.n	8000b10 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	210e      	movs	r1, #14
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	e00f      	b.n	8000b30 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	210a      	movs	r1, #10
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	438a      	bics	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	e007      	b.n	8000b52 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2220      	movs	r2, #32
 8000b46:	2100      	movs	r1, #0
 8000b48:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000b4a:	2317      	movs	r3, #23
 8000b4c:	18fb      	adds	r3, r7, r3
 8000b4e:	2202      	movs	r2, #2
 8000b50:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000b52:	2317      	movs	r3, #23
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	781b      	ldrb	r3, [r3, #0]
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b006      	add	sp, #24
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b68:	210f      	movs	r1, #15
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2221      	movs	r2, #33	; 0x21
 8000b74:	5c9b      	ldrb	r3, [r3, r2]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d006      	beq.n	8000b8a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2204      	movs	r2, #4
 8000b80:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e028      	b.n	8000bdc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	210e      	movs	r1, #14
 8000b96:	438a      	bics	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	438a      	bics	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4091      	lsls	r1, r2
 8000bb6:	000a      	movs	r2, r1
 8000bb8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2221      	movs	r2, #33	; 0x21
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d004      	beq.n	8000bdc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	0010      	movs	r0, r2
 8000bda:	4798      	blx	r3
    }
  }
  return status;
 8000bdc:	230f      	movs	r3, #15
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	781b      	ldrb	r3, [r3, #0]
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	2204      	movs	r2, #4
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	d024      	beq.n	8000c5c <HAL_DMA_IRQHandler+0x72>
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2204      	movs	r2, #4
 8000c16:	4013      	ands	r3, r2
 8000c18:	d020      	beq.n	8000c5c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2220      	movs	r2, #32
 8000c22:	4013      	ands	r3, r2
 8000c24:	d107      	bne.n	8000c36 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2104      	movs	r1, #4
 8000c32:	438a      	bics	r2, r1
 8000c34:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3e:	2104      	movs	r1, #4
 8000c40:	4091      	lsls	r1, r2
 8000c42:	000a      	movs	r2, r1
 8000c44:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d100      	bne.n	8000c50 <HAL_DMA_IRQHandler+0x66>
 8000c4e:	e06a      	b.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	0010      	movs	r0, r2
 8000c58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000c5a:	e064      	b.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	2202      	movs	r2, #2
 8000c62:	409a      	lsls	r2, r3
 8000c64:	0013      	movs	r3, r2
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	d02b      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0xda>
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	2202      	movs	r2, #2
 8000c70:	4013      	ands	r3, r2
 8000c72:	d027      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	d10b      	bne.n	8000c98 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	210a      	movs	r1, #10
 8000c8c:	438a      	bics	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2221      	movs	r2, #33	; 0x21
 8000c94:	2101      	movs	r1, #1
 8000c96:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	4091      	lsls	r1, r2
 8000ca4:	000a      	movs	r2, r1
 8000ca6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2220      	movs	r2, #32
 8000cac:	2100      	movs	r1, #0
 8000cae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d036      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	0010      	movs	r0, r2
 8000cc0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000cc2:	e030      	b.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	2208      	movs	r2, #8
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	d028      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	4013      	ands	r3, r2
 8000cda:	d024      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	210e      	movs	r1, #14
 8000ce8:	438a      	bics	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	000a      	movs	r2, r1
 8000cfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2221      	movs	r2, #33	; 0x21
 8000d06:	2101      	movs	r1, #1
 8000d08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2220      	movs	r2, #32
 8000d0e:	2100      	movs	r1, #0
 8000d10:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d005      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	0010      	movs	r0, r2
 8000d22:	4798      	blx	r3
    }
  }
}
 8000d24:	e7ff      	b.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b004      	add	sp, #16
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2221      	movs	r2, #33	; 0x21
 8000d3a:	5c9b      	ldrb	r3, [r3, r2]
 8000d3c:	b2db      	uxtb	r3, r3
}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4091      	lsls	r1, r2
 8000d60:	000a      	movs	r2, r1
 8000d62:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b10      	cmp	r3, #16
 8000d72:	d108      	bne.n	8000d86 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68ba      	ldr	r2, [r7, #8]
 8000d82:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d84:	e007      	b.n	8000d96 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	60da      	str	r2, [r3, #12]
}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b004      	add	sp, #16
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <DMA_CalcBaseAndBitshift+0x30>)
 8000dae:	4694      	mov	ip, r2
 8000db0:	4463      	add	r3, ip
 8000db2:	2114      	movs	r1, #20
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff f9a7 	bl	8000108 <__udivsi3>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	009a      	lsls	r2, r3, #2
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <DMA_CalcBaseAndBitshift+0x34>)
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	bffdfff8 	.word	0xbffdfff8
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de6:	e14f      	b.n	8001088 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2101      	movs	r1, #1
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	4091      	lsls	r1, r2
 8000df2:	000a      	movs	r2, r1
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d100      	bne.n	8000e00 <HAL_GPIO_Init+0x28>
 8000dfe:	e140      	b.n	8001082 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2203      	movs	r2, #3
 8000e06:	4013      	ands	r3, r2
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d005      	beq.n	8000e18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2203      	movs	r2, #3
 8000e12:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d130      	bne.n	8000e7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	409a      	lsls	r2, r3
 8000e26:	0013      	movs	r3, r2
 8000e28:	43da      	mvns	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	0013      	movs	r3, r2
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4e:	2201      	movs	r2, #1
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	2201      	movs	r2, #1
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2203      	movs	r2, #3
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d017      	beq.n	8000eb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	43da      	mvns	r2, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2203      	movs	r2, #3
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d123      	bne.n	8000f0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	08da      	lsrs	r2, r3, #3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3208      	adds	r2, #8
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	58d3      	ldr	r3, [r2, r3]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2207      	movs	r2, #7
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	220f      	movs	r2, #15
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	691a      	ldr	r2, [r3, #16]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	2107      	movs	r1, #7
 8000eee:	400b      	ands	r3, r1
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	08da      	lsrs	r2, r3, #3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3208      	adds	r2, #8
 8000f04:	0092      	lsls	r2, r2, #2
 8000f06:	6939      	ldr	r1, [r7, #16]
 8000f08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2203      	movs	r2, #3
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2203      	movs	r2, #3
 8000f28:	401a      	ands	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	23c0      	movs	r3, #192	; 0xc0
 8000f44:	029b      	lsls	r3, r3, #10
 8000f46:	4013      	ands	r3, r2
 8000f48:	d100      	bne.n	8000f4c <HAL_GPIO_Init+0x174>
 8000f4a:	e09a      	b.n	8001082 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4c:	4b54      	ldr	r3, [pc, #336]	; (80010a0 <HAL_GPIO_Init+0x2c8>)
 8000f4e:	699a      	ldr	r2, [r3, #24]
 8000f50:	4b53      	ldr	r3, [pc, #332]	; (80010a0 <HAL_GPIO_Init+0x2c8>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	430a      	orrs	r2, r1
 8000f56:	619a      	str	r2, [r3, #24]
 8000f58:	4b51      	ldr	r3, [pc, #324]	; (80010a0 <HAL_GPIO_Init+0x2c8>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4013      	ands	r3, r2
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f64:	4a4f      	ldr	r2, [pc, #316]	; (80010a4 <HAL_GPIO_Init+0x2cc>)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	589b      	ldr	r3, [r3, r2]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2203      	movs	r2, #3
 8000f76:	4013      	ands	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	0013      	movs	r3, r2
 8000f80:	43da      	mvns	r2, r3
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	2390      	movs	r3, #144	; 0x90
 8000f8c:	05db      	lsls	r3, r3, #23
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0x1e2>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a44      	ldr	r2, [pc, #272]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x1de>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a43      	ldr	r2, [pc, #268]	; (80010ac <HAL_GPIO_Init+0x2d4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x1da>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a42      	ldr	r2, [pc, #264]	; (80010b0 <HAL_GPIO_Init+0x2d8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x1d6>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x1e4>
 8000fae:	2305      	movs	r3, #5
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x1e4>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x1e4>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x1e4>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	; (80010a4 <HAL_GPIO_Init+0x2cc>)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b36      	ldr	r3, [pc, #216]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	035b      	lsls	r3, r3, #13
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43da      	mvns	r2, r3
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	039b      	lsls	r3, r3, #14
 800101c:	4013      	ands	r3, r2
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43da      	mvns	r2, r3
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	029b      	lsls	r3, r3, #10
 8001046:	4013      	ands	r3, r2
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43da      	mvns	r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	025b      	lsls	r3, r3, #9
 8001070:	4013      	ands	r3, r2
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	40da      	lsrs	r2, r3
 8001090:	1e13      	subs	r3, r2, #0
 8001092:	d000      	beq.n	8001096 <HAL_GPIO_Init+0x2be>
 8001094:	e6a8      	b.n	8000de8 <HAL_GPIO_Init+0x10>
  } 
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b006      	add	sp, #24
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010000 	.word	0x40010000
 80010a8:	48000400 	.word	0x48000400
 80010ac:	48000800 	.word	0x48000800
 80010b0:	48000c00 	.word	0x48000c00
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	0008      	movs	r0, r1
 80010c2:	0011      	movs	r1, r2
 80010c4:	1cbb      	adds	r3, r7, #2
 80010c6:	1c02      	adds	r2, r0, #0
 80010c8:	801a      	strh	r2, [r3, #0]
 80010ca:	1c7b      	adds	r3, r7, #1
 80010cc:	1c0a      	adds	r2, r1, #0
 80010ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d0:	1c7b      	adds	r3, r7, #1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d004      	beq.n	80010e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d8:	1cbb      	adds	r3, r7, #2
 80010da:	881a      	ldrh	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010e0:	e003      	b.n	80010ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010e2:	1cbb      	adds	r3, r7, #2
 80010e4:	881a      	ldrh	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e082      	b.n	800120c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2241      	movs	r2, #65	; 0x41
 800110a:	5c9b      	ldrb	r3, [r3, r2]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d107      	bne.n	8001122 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2240      	movs	r2, #64	; 0x40
 8001116:	2100      	movs	r1, #0
 8001118:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff fa1b 	bl	8000558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2241      	movs	r2, #65	; 0x41
 8001126:	2124      	movs	r1, #36	; 0x24
 8001128:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	438a      	bics	r2, r1
 8001138:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4934      	ldr	r1, [pc, #208]	; (8001214 <HAL_I2C_Init+0x120>)
 8001144:	400a      	ands	r2, r1
 8001146:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4931      	ldr	r1, [pc, #196]	; (8001218 <HAL_I2C_Init+0x124>)
 8001154:	400a      	ands	r2, r1
 8001156:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d108      	bne.n	8001172 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	0209      	lsls	r1, r1, #8
 800116c:	430a      	orrs	r2, r1
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	e007      	b.n	8001182 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2184      	movs	r1, #132	; 0x84
 800117c:	0209      	lsls	r1, r1, #8
 800117e:	430a      	orrs	r2, r1
 8001180:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d104      	bne.n	8001194 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	491f      	ldr	r1, [pc, #124]	; (800121c <HAL_I2C_Init+0x128>)
 80011a0:	430a      	orrs	r2, r1
 80011a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	491a      	ldr	r1, [pc, #104]	; (8001218 <HAL_I2C_Init+0x124>)
 80011b0:	400a      	ands	r2, r1
 80011b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	431a      	orrs	r2, r3
 80011be:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69d9      	ldr	r1, [r3, #28]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1a      	ldr	r2, [r3, #32]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2101      	movs	r1, #1
 80011ea:	430a      	orrs	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2241      	movs	r2, #65	; 0x41
 80011f8:	2120      	movs	r1, #32
 80011fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2242      	movs	r2, #66	; 0x42
 8001206:	2100      	movs	r1, #0
 8001208:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}
 8001214:	f0ffffff 	.word	0xf0ffffff
 8001218:	ffff7fff 	.word	0xffff7fff
 800121c:	02008000 	.word	0x02008000

08001220 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	1dbb      	adds	r3, r7, #6
 800122c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2241      	movs	r2, #65	; 0x41
 8001232:	5c9b      	ldrb	r3, [r3, r2]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b20      	cmp	r3, #32
 8001238:	d000      	beq.n	800123c <HAL_I2C_Slave_Transmit_DMA+0x1c>
 800123a:	e0df      	b.n	80013fc <HAL_I2C_Slave_Transmit_DMA+0x1dc>
  {
    if ((pData == NULL) || (Size == 0U))
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_I2C_Slave_Transmit_DMA+0x2a>
 8001242:	1dbb      	adds	r3, r7, #6
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <HAL_I2C_Slave_Transmit_DMA+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e0d3      	b.n	80013fe <HAL_I2C_Slave_Transmit_DMA+0x1de>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2240      	movs	r2, #64	; 0x40
 800125a:	5c9b      	ldrb	r3, [r3, r2]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <HAL_I2C_Slave_Transmit_DMA+0x44>
 8001260:	2302      	movs	r3, #2
 8001262:	e0cc      	b.n	80013fe <HAL_I2C_Slave_Transmit_DMA+0x1de>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2240      	movs	r2, #64	; 0x40
 8001268:	2101      	movs	r1, #1
 800126a:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2241      	movs	r2, #65	; 0x41
 8001270:	2121      	movs	r1, #33	; 0x21
 8001272:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2242      	movs	r2, #66	; 0x42
 8001278:	2120      	movs	r1, #32
 800127a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2200      	movs	r2, #0
 8001280:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1dba      	adds	r2, r7, #6
 800128c:	8812      	ldrh	r2, [r2, #0]
 800128e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001294:	b29a      	uxth	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4a5a      	ldr	r2, [pc, #360]	; (8001408 <HAL_I2C_Slave_Transmit_DMA+0x1e8>)
 800129e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4a5a      	ldr	r2, [pc, #360]	; (800140c <HAL_I2C_Slave_Transmit_DMA+0x1ec>)
 80012a4:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->transmit_or_receive=1;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2254      	movs	r2, #84	; 0x54
 80012aa:	2101      	movs	r1, #1
 80012ac:	5499      	strb	r1, [r3, r2]
    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6a1a      	ldr	r2, [r3, #32]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	029b      	lsls	r3, r3, #10
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d117      	bne.n	80012ea <HAL_I2C_Slave_Transmit_DMA+0xca>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	781a      	ldrb	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	3b01      	subs	r3, #1
 80012d8:	b29a      	uxth	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e2:	3b01      	subs	r3, #1
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferCount != 0U)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d06e      	beq.n	80013d2 <HAL_I2C_Slave_Transmit_DMA+0x1b2>
    {
      if (hi2c->hdmatx != NULL)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d025      	beq.n	8001348 <HAL_I2C_Slave_Transmit_DMA+0x128>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001300:	4a43      	ldr	r2, [pc, #268]	; (8001410 <HAL_I2C_Slave_Transmit_DMA+0x1f0>)
 8001302:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001308:	4a42      	ldr	r2, [pc, #264]	; (8001414 <HAL_I2C_Slave_Transmit_DMA+0x1f4>)
 800130a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001310:	2200      	movs	r2, #0
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001318:	2200      	movs	r2, #0
 800131a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8001324:	0019      	movs	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800132c:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8001332:	2517      	movs	r5, #23
 8001334:	197c      	adds	r4, r7, r5
 8001336:	f7ff fbad 	bl	8000a94 <HAL_DMA_Start_IT>
 800133a:	0003      	movs	r3, r0
 800133c:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800133e:	197b      	adds	r3, r7, r5
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d131      	bne.n	80013aa <HAL_I2C_Slave_Transmit_DMA+0x18a>
 8001346:	e013      	b.n	8001370 <HAL_I2C_Slave_Transmit_DMA+0x150>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2241      	movs	r2, #65	; 0x41
 800134c:	2128      	movs	r1, #40	; 0x28
 800134e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2242      	movs	r2, #66	; 0x42
 8001354:	2100      	movs	r1, #0
 8001356:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	2280      	movs	r2, #128	; 0x80
 800135e:	431a      	orrs	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2240      	movs	r2, #64	; 0x40
 8001368:	2100      	movs	r1, #0
 800136a:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e046      	b.n	80013fe <HAL_I2C_Slave_Transmit_DMA+0x1de>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4927      	ldr	r1, [pc, #156]	; (8001418 <HAL_I2C_Slave_Transmit_DMA+0x1f8>)
 800137c:	400a      	ands	r2, r1
 800137e:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2240      	movs	r2, #64	; 0x40
 8001384:	2100      	movs	r1, #0
 8001386:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	021a      	lsls	r2, r3, #8
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	0011      	movs	r1, r2
 8001390:	0018      	movs	r0, r3
 8001392:	f001 f9f3 	bl	800277c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	01c9      	lsls	r1, r1, #7
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e026      	b.n	80013f8 <HAL_I2C_Slave_Transmit_DMA+0x1d8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2241      	movs	r2, #65	; 0x41
 80013ae:	2128      	movs	r1, #40	; 0x28
 80013b0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2242      	movs	r2, #66	; 0x42
 80013b6:	2100      	movs	r1, #0
 80013b8:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	2210      	movs	r2, #16
 80013c0:	431a      	orrs	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2240      	movs	r2, #64	; 0x40
 80013ca:	2100      	movs	r1, #0
 80013cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e015      	b.n	80013fe <HAL_I2C_Slave_Transmit_DMA+0x1de>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	490e      	ldr	r1, [pc, #56]	; (8001418 <HAL_I2C_Slave_Transmit_DMA+0x1f8>)
 80013de:	400a      	ands	r2, r1
 80013e0:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2240      	movs	r2, #64	; 0x40
 80013e6:	2100      	movs	r1, #0
 80013e8:	5499      	strb	r1, [r3, r2]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	021a      	lsls	r2, r3, #8
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	0011      	movs	r1, r2
 80013f2:	0018      	movs	r0, r3
 80013f4:	f001 f9c2 	bl	800277c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e000      	b.n	80013fe <HAL_I2C_Slave_Transmit_DMA+0x1de>
  }
  else
  {
    return HAL_BUSY;
 80013fc:	2302      	movs	r3, #2
  }
}
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	b006      	add	sp, #24
 8001404:	bdb0      	pop	{r4, r5, r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	ffff0000 	.word	0xffff0000
 800140c:	08001ca1 	.word	0x08001ca1
 8001410:	08002601 	.word	0x08002601
 8001414:	08002699 	.word	0x08002699
 8001418:	ffff7fff 	.word	0xffff7fff

0800141c <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800141c:	b5b0      	push	{r4, r5, r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	1dbb      	adds	r3, r7, #6
 8001428:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2241      	movs	r2, #65	; 0x41
 800142e:	5c9b      	ldrb	r3, [r3, r2]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b20      	cmp	r3, #32
 8001434:	d000      	beq.n	8001438 <HAL_I2C_Slave_Receive_DMA+0x1c>
 8001436:	e0a6      	b.n	8001586 <HAL_I2C_Slave_Receive_DMA+0x16a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_I2C_Slave_Receive_DMA+0x2a>
 800143e:	1dbb      	adds	r3, r7, #6
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d105      	bne.n	8001452 <HAL_I2C_Slave_Receive_DMA+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e09a      	b.n	8001588 <HAL_I2C_Slave_Receive_DMA+0x16c>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2240      	movs	r2, #64	; 0x40
 8001456:	5c9b      	ldrb	r3, [r3, r2]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_I2C_Slave_Receive_DMA+0x44>
 800145c:	2302      	movs	r3, #2
 800145e:	e093      	b.n	8001588 <HAL_I2C_Slave_Receive_DMA+0x16c>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2240      	movs	r2, #64	; 0x40
 8001464:	2101      	movs	r1, #1
 8001466:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2241      	movs	r2, #65	; 0x41
 800146c:	2122      	movs	r1, #34	; 0x22
 800146e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2242      	movs	r2, #66	; 0x42
 8001474:	2120      	movs	r1, #32
 8001476:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1dba      	adds	r2, r7, #6
 8001488:	8812      	ldrh	r2, [r2, #0]
 800148a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001490:	b29a      	uxth	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4a3d      	ldr	r2, [pc, #244]	; (8001590 <HAL_I2C_Slave_Receive_DMA+0x174>)
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4a3d      	ldr	r2, [pc, #244]	; (8001594 <HAL_I2C_Slave_Receive_DMA+0x178>)
 80014a0:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->transmit_or_receive=0;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2254      	movs	r2, #84	; 0x54
 80014a6:	2100      	movs	r1, #0
 80014a8:	5499      	strb	r1, [r3, r2]
    if (hi2c->hdmarx != NULL)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d023      	beq.n	80014fa <HAL_I2C_Slave_Receive_DMA+0xde>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b6:	4a38      	ldr	r2, [pc, #224]	; (8001598 <HAL_I2C_Slave_Receive_DMA+0x17c>)
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014be:	4a37      	ldr	r2, [pc, #220]	; (800159c <HAL_I2C_Slave_Receive_DMA+0x180>)
 80014c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c6:	2200      	movs	r2, #0
 80014c8:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferAbortCallback = NULL;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ce:	2200      	movs	r2, #0
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3324      	adds	r3, #36	; 0x24
 80014dc:	0019      	movs	r1, r3
 80014de:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80014e4:	2517      	movs	r5, #23
 80014e6:	197c      	adds	r4, r7, r5
 80014e8:	f7ff fad4 	bl	8000a94 <HAL_DMA_Start_IT>
 80014ec:	0003      	movs	r3, r0
 80014ee:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80014f0:	197b      	adds	r3, r7, r5
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d132      	bne.n	800155e <HAL_I2C_Slave_Receive_DMA+0x142>
 80014f8:	e013      	b.n	8001522 <HAL_I2C_Slave_Receive_DMA+0x106>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2241      	movs	r2, #65	; 0x41
 80014fe:	2128      	movs	r1, #40	; 0x28
 8001500:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2242      	movs	r2, #66	; 0x42
 8001506:	2100      	movs	r1, #0
 8001508:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	2280      	movs	r2, #128	; 0x80
 8001510:	431a      	orrs	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2240      	movs	r2, #64	; 0x40
 800151a:	2100      	movs	r1, #0
 800151c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e032      	b.n	8001588 <HAL_I2C_Slave_Receive_DMA+0x16c>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	491c      	ldr	r1, [pc, #112]	; (80015a0 <HAL_I2C_Slave_Receive_DMA+0x184>)
 800152e:	400a      	ands	r2, r1
 8001530:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2240      	movs	r2, #64	; 0x40
 8001536:	2100      	movs	r1, #0
 8001538:	5499      	strb	r1, [r3, r2]

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	021a      	lsls	r2, r3, #8
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	0011      	movs	r1, r2
 8001542:	0018      	movs	r0, r3
 8001544:	f001 f91a 	bl	800277c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	0209      	lsls	r1, r1, #8
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e014      	b.n	8001588 <HAL_I2C_Slave_Receive_DMA+0x16c>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2241      	movs	r2, #65	; 0x41
 8001562:	2128      	movs	r1, #40	; 0x28
 8001564:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2242      	movs	r2, #66	; 0x42
 800156a:	2100      	movs	r1, #0
 800156c:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	2210      	movs	r2, #16
 8001574:	431a      	orrs	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2240      	movs	r2, #64	; 0x40
 800157e:	2100      	movs	r1, #0
 8001580:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <HAL_I2C_Slave_Receive_DMA+0x16c>
  }
  else
  {
    return HAL_BUSY;
 8001586:	2302      	movs	r3, #2
  }
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	b006      	add	sp, #24
 800158e:	bdb0      	pop	{r4, r5, r7, pc}
 8001590:	ffff0000 	.word	0xffff0000
 8001594:	08001ca1 	.word	0x08001ca1
 8001598:	08002649 	.word	0x08002649
 800159c:	08002699 	.word	0x08002699
 80015a0:	ffff7fff 	.word	0xffff7fff

080015a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
//  if (hi2c->XferISR != NULL)
//  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	68f9      	ldr	r1, [r7, #12]
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4798      	blx	r3
//  }
}
 80015c8:	46c0      	nop			; (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b004      	add	sp, #16
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b002      	add	sp, #8
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b002      	add	sp, #8
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	0008      	movs	r0, r1
 800160a:	0011      	movs	r1, r2
 800160c:	1cfb      	adds	r3, r7, #3
 800160e:	1c02      	adds	r2, r0, #0
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	003b      	movs	r3, r7
 8001614:	1c0a      	adds	r2, r1, #0
 8001616:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b002      	add	sp, #8
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001638:	46c0      	nop			; (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	b002      	add	sp, #8
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b002      	add	sp, #8
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b002      	add	sp, #8
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}

08001670 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2240      	movs	r2, #64	; 0x40
 800168a:	5c9b      	ldrb	r3, [r3, r2]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <I2C_Slave_ISR_IT+0x24>
 8001690:	2302      	movs	r3, #2
 8001692:	e0e6      	b.n	8001862 <I2C_Slave_ISR_IT+0x1f2>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2240      	movs	r2, #64	; 0x40
 8001698:	2101      	movs	r1, #1
 800169a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	2220      	movs	r2, #32
 80016a0:	4013      	ands	r3, r2
 80016a2:	d009      	beq.n	80016b8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2220      	movs	r2, #32
 80016a8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80016aa:	d005      	beq.n	80016b8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	0011      	movs	r1, r2
 80016b2:	0018      	movs	r0, r3
 80016b4:	f000 fd42 	bl	800213c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	2210      	movs	r2, #16
 80016bc:	4013      	ands	r3, r2
 80016be:	d052      	beq.n	8001766 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2210      	movs	r2, #16
 80016c4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80016c6:	d04e      	beq.n	8001766 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d12d      	bne.n	800172e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2241      	movs	r2, #65	; 0x41
 80016d6:	5c9b      	ldrb	r3, [r3, r2]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b28      	cmp	r3, #40	; 0x28
 80016dc:	d10b      	bne.n	80016f6 <I2C_Slave_ISR_IT+0x86>
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	049b      	lsls	r3, r3, #18
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d106      	bne.n	80016f6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	0011      	movs	r1, r2
 80016ee:	0018      	movs	r0, r3
 80016f0:	f000 fde0 	bl	80022b4 <I2C_ITListenCplt>
 80016f4:	e036      	b.n	8001764 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2241      	movs	r2, #65	; 0x41
 80016fa:	5c9b      	ldrb	r3, [r3, r2]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b29      	cmp	r3, #41	; 0x29
 8001700:	d110      	bne.n	8001724 <I2C_Slave_ISR_IT+0xb4>
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	4a59      	ldr	r2, [pc, #356]	; (800186c <I2C_Slave_ISR_IT+0x1fc>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00c      	beq.n	8001724 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2210      	movs	r2, #16
 8001710:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	0018      	movs	r0, r3
 8001716:	f000 ff50 	bl	80025ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	0018      	movs	r0, r3
 800171e:	f000 fbdb 	bl	8001ed8 <I2C_ITSlaveSeqCplt>
 8001722:	e01f      	b.n	8001764 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2210      	movs	r2, #16
 800172a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800172c:	e091      	b.n	8001852 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2210      	movs	r2, #16
 8001734:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	2204      	movs	r2, #4
 800173c:	431a      	orrs	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <I2C_Slave_ISR_IT+0xe4>
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	045b      	lsls	r3, r3, #17
 800174e:	429a      	cmp	r2, r3
 8001750:	d000      	beq.n	8001754 <I2C_Slave_ISR_IT+0xe4>
 8001752:	e07e      	b.n	8001852 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	0011      	movs	r1, r2
 800175c:	0018      	movs	r0, r3
 800175e:	f000 fe01 	bl	8002364 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001762:	e076      	b.n	8001852 <I2C_Slave_ISR_IT+0x1e2>
 8001764:	e075      	b.n	8001852 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2204      	movs	r2, #4
 800176a:	4013      	ands	r3, r2
 800176c:	d02f      	beq.n	80017ce <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2204      	movs	r2, #4
 8001772:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001774:	d02b      	beq.n	80017ce <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177a:	b29b      	uxth	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d018      	beq.n	80017b2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179c:	3b01      	subs	r3, #1
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3b01      	subs	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d14c      	bne.n	8001856 <I2C_Slave_ISR_IT+0x1e6>
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	4a2b      	ldr	r2, [pc, #172]	; (800186c <I2C_Slave_ISR_IT+0x1fc>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d048      	beq.n	8001856 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 fb86 	bl	8001ed8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80017cc:	e043      	b.n	8001856 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	2208      	movs	r2, #8
 80017d2:	4013      	ands	r3, r2
 80017d4:	d00a      	beq.n	80017ec <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2208      	movs	r2, #8
 80017da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80017dc:	d006      	beq.n	80017ec <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	0011      	movs	r1, r2
 80017e4:	0018      	movs	r0, r3
 80017e6:	f000 fa91 	bl	8001d0c <I2C_ITAddrCplt>
 80017ea:	e035      	b.n	8001858 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d031      	beq.n	8001858 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2202      	movs	r2, #2
 80017f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80017fa:	d02d      	beq.n	8001858 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001800:	b29b      	uxth	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d018      	beq.n	8001838 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001820:	b29b      	uxth	r3, r3
 8001822:	3b01      	subs	r3, #1
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182e:	3b01      	subs	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	851a      	strh	r2, [r3, #40]	; 0x28
 8001836:	e00f      	b.n	8001858 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	045b      	lsls	r3, r3, #17
 800183e:	429a      	cmp	r2, r3
 8001840:	d002      	beq.n	8001848 <I2C_Slave_ISR_IT+0x1d8>
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d107      	bne.n	8001858 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	0018      	movs	r0, r3
 800184c:	f000 fb44 	bl	8001ed8 <I2C_ITSlaveSeqCplt>
 8001850:	e002      	b.n	8001858 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	e000      	b.n	8001858 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8001856:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2240      	movs	r2, #64	; 0x40
 800185c:	2100      	movs	r1, #0
 800185e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b006      	add	sp, #24
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	ffff0000 	.word	0xffff0000

08001870 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2240      	movs	r2, #64	; 0x40
 8001880:	5c9b      	ldrb	r3, [r3, r2]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <I2C_Master_ISR_DMA+0x1a>
 8001886:	2302      	movs	r3, #2
 8001888:	e0e7      	b.n	8001a5a <I2C_Master_ISR_DMA+0x1ea>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2240      	movs	r2, #64	; 0x40
 800188e:	2101      	movs	r1, #1
 8001890:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2210      	movs	r2, #16
 8001896:	4013      	ands	r3, r2
 8001898:	d017      	beq.n	80018ca <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2210      	movs	r2, #16
 800189e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80018a0:	d013      	beq.n	80018ca <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2210      	movs	r2, #16
 80018a8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	2204      	movs	r2, #4
 80018b0:	431a      	orrs	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2120      	movs	r1, #32
 80018ba:	0018      	movs	r0, r3
 80018bc:	f000 ff5e 	bl	800277c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 fe79 	bl	80025ba <I2C_Flush_TXDR>
 80018c8:	e0c2      	b.n	8001a50 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	4013      	ands	r3, r2
 80018d0:	d100      	bne.n	80018d4 <I2C_Master_ISR_DMA+0x64>
 80018d2:	e07c      	b.n	80019ce <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2240      	movs	r2, #64	; 0x40
 80018d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80018da:	d100      	bne.n	80018de <I2C_Master_ISR_DMA+0x6e>
 80018dc:	e077      	b.n	80019ce <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2140      	movs	r1, #64	; 0x40
 80018ea:	438a      	bics	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d055      	beq.n	80019a4 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	2312      	movs	r3, #18
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	0592      	lsls	r2, r2, #22
 8001906:	0d92      	lsrs	r2, r2, #22
 8001908:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190e:	b29b      	uxth	r3, r3
 8001910:	2bff      	cmp	r3, #255	; 0xff
 8001912:	d906      	bls.n	8001922 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	22ff      	movs	r2, #255	; 0xff
 8001918:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	045b      	lsls	r3, r3, #17
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e010      	b.n	8001944 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001926:	b29a      	uxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	4a4c      	ldr	r2, [pc, #304]	; (8001a64 <I2C_Master_ISR_DMA+0x1f4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d003      	beq.n	800193e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e002      	b.n	8001944 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	049b      	lsls	r3, r3, #18
 8001942:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001948:	b2da      	uxtb	r2, r3
 800194a:	697c      	ldr	r4, [r7, #20]
 800194c:	2312      	movs	r3, #18
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	8819      	ldrh	r1, [r3, #0]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	2300      	movs	r3, #0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	0023      	movs	r3, r4
 800195a:	f000 fed5 	bl	8002708 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2241      	movs	r2, #65	; 0x41
 8001974:	5c9b      	ldrb	r3, [r3, r2]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b22      	cmp	r3, #34	; 0x22
 800197a:	d109      	bne.n	8001990 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	0209      	lsls	r1, r1, #8
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800198e:	e05f      	b.n	8001a50 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	01c9      	lsls	r1, r1, #7
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80019a2:	e055      	b.n	8001a50 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	049b      	lsls	r3, r3, #18
 80019ae:	401a      	ands	r2, r3
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	049b      	lsls	r3, r3, #18
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d004      	beq.n	80019c2 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	0018      	movs	r0, r3
 80019bc:	f000 fa4a 	bl	8001e54 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80019c0:	e046      	b.n	8001a50 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2140      	movs	r1, #64	; 0x40
 80019c6:	0018      	movs	r0, r3
 80019c8:	f000 fccc 	bl	8002364 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80019cc:	e040      	b.n	8001a50 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2240      	movs	r2, #64	; 0x40
 80019d2:	4013      	ands	r3, r2
 80019d4:	d02c      	beq.n	8001a30 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2240      	movs	r2, #64	; 0x40
 80019da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80019dc:	d028      	beq.n	8001a30 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d11d      	bne.n	8001a24 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	049b      	lsls	r3, r3, #18
 80019f2:	401a      	ands	r2, r3
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	049b      	lsls	r3, r3, #18
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d028      	beq.n	8001a4e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	4a18      	ldr	r2, [pc, #96]	; (8001a64 <I2C_Master_ISR_DMA+0x1f4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d109      	bne.n	8001a1a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	01c9      	lsls	r1, r1, #7
 8001a14:	430a      	orrs	r2, r1
 8001a16:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001a18:	e019      	b.n	8001a4e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f000 fa19 	bl	8001e54 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001a22:	e014      	b.n	8001a4e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2140      	movs	r1, #64	; 0x40
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f000 fc9b 	bl	8002364 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001a2e:	e00e      	b.n	8001a4e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2220      	movs	r2, #32
 8001a34:	4013      	ands	r3, r2
 8001a36:	d00b      	beq.n	8001a50 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a3e:	d007      	beq.n	8001a50 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	0011      	movs	r1, r2
 8001a46:	0018      	movs	r0, r3
 8001a48:	f000 faaa 	bl	8001fa0 <I2C_ITMasterCplt>
 8001a4c:	e000      	b.n	8001a50 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8001a4e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2240      	movs	r2, #64	; 0x40
 8001a54:	2100      	movs	r1, #0
 8001a56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b007      	add	sp, #28
 8001a60:	bd90      	pop	{r4, r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	ffff0000 	.word	0xffff0000

08001a68 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001a74:	4b88      	ldr	r3, [pc, #544]	; (8001c98 <I2C_Mem_ISR_DMA+0x230>)
 8001a76:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2240      	movs	r2, #64	; 0x40
 8001a7c:	5c9b      	ldrb	r3, [r3, r2]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <I2C_Mem_ISR_DMA+0x1e>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e104      	b.n	8001c90 <I2C_Mem_ISR_DMA+0x228>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2240      	movs	r2, #64	; 0x40
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2210      	movs	r2, #16
 8001a92:	4013      	ands	r3, r2
 8001a94:	d017      	beq.n	8001ac6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2210      	movs	r2, #16
 8001a9a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001a9c:	d013      	beq.n	8001ac6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	2204      	movs	r2, #4
 8001aac:	431a      	orrs	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f000 fe60 	bl	800277c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f000 fd7b 	bl	80025ba <I2C_Flush_TXDR>
 8001ac4:	e0df      	b.n	8001c86 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	4013      	ands	r3, r2
 8001acc:	d00d      	beq.n	8001aea <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ad4:	d009      	beq.n	8001aea <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4252      	negs	r2, r2
 8001ae6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ae8:	e0cd      	b.n	8001c86 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	4013      	ands	r3, r2
 8001af0:	d05e      	beq.n	8001bb0 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2240      	movs	r2, #64	; 0x40
 8001af6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001af8:	d05a      	beq.n	8001bb0 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2110      	movs	r1, #16
 8001afe:	0018      	movs	r0, r3
 8001b00:	f000 fe3c 	bl	800277c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d04a      	beq.n	8001ba4 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2bff      	cmp	r3, #255	; 0xff
 8001b16:	d910      	bls.n	8001b3a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	22ff      	movs	r2, #255	; 0xff
 8001b1c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	b299      	uxth	r1, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	045b      	lsls	r3, r3, #17
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	2400      	movs	r4, #0
 8001b32:	9400      	str	r4, [sp, #0]
 8001b34:	f000 fde8 	bl	8002708 <I2C_TransferConfig>
 8001b38:	e011      	b.n	8001b5e <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	b299      	uxth	r1, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	049b      	lsls	r3, r3, #18
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	2400      	movs	r4, #0
 8001b58:	9400      	str	r4, [sp, #0]
 8001b5a:	f000 fdd5 	bl	8002708 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2241      	movs	r2, #65	; 0x41
 8001b74:	5c9b      	ldrb	r3, [r3, r2]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b22      	cmp	r3, #34	; 0x22
 8001b7a:	d109      	bne.n	8001b90 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	0209      	lsls	r1, r1, #8
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001b8e:	e07a      	b.n	8001c86 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2180      	movs	r1, #128	; 0x80
 8001b9c:	01c9      	lsls	r1, r1, #7
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001ba2:	e070      	b.n	8001c86 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2140      	movs	r1, #64	; 0x40
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f000 fbdb 	bl	8002364 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001bae:	e06a      	b.n	8001c86 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2240      	movs	r2, #64	; 0x40
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d058      	beq.n	8001c6a <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001bbe:	d054      	beq.n	8001c6a <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2241      	movs	r2, #65	; 0x41
 8001bc4:	5c9b      	ldrb	r3, [r3, r2]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b22      	cmp	r3, #34	; 0x22
 8001bca:	d101      	bne.n	8001bd0 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8001bcc:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <I2C_Mem_ISR_DMA+0x234>)
 8001bce:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2bff      	cmp	r3, #255	; 0xff
 8001bd8:	d911      	bls.n	8001bfe <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	22ff      	movs	r2, #255	; 0xff
 8001bde:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	b299      	uxth	r1, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	045c      	lsls	r4, r3, #17
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	0023      	movs	r3, r4
 8001bf8:	f000 fd86 	bl	8002708 <I2C_TransferConfig>
 8001bfc:	e012      	b.n	8001c24 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	b299      	uxth	r1, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	049c      	lsls	r4, r3, #18
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	0023      	movs	r3, r4
 8001c20:	f000 fd72 	bl	8002708 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2241      	movs	r2, #65	; 0x41
 8001c3a:	5c9b      	ldrb	r3, [r3, r2]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b22      	cmp	r3, #34	; 0x22
 8001c40:	d109      	bne.n	8001c56 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	0209      	lsls	r1, r1, #8
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c54:	e017      	b.n	8001c86 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2180      	movs	r1, #128	; 0x80
 8001c62:	01c9      	lsls	r1, r1, #7
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c68:	e00d      	b.n	8001c86 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d009      	beq.n	8001c86 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2220      	movs	r2, #32
 8001c76:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c78:	d005      	beq.n	8001c86 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	0011      	movs	r1, r2
 8001c80:	0018      	movs	r0, r3
 8001c82:	f000 f98d 	bl	8001fa0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2240      	movs	r2, #64	; 0x40
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b007      	add	sp, #28
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	80002000 	.word	0x80002000
 8001c9c:	80002400 	.word	0x80002400

08001ca0 <I2C_Slave_ISR_DMA>:
  * @retval HAL status
  */
extern uint8_t buffer_rx[8];
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
//  uint32_t tmpoptions = hi2c->XferOptions;
//  uint32_t treatdmanack = 0U;
//  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2240      	movs	r2, #64	; 0x40
 8001cb0:	5c9b      	ldrb	r3, [r3, r2]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <I2C_Slave_ISR_DMA+0x1a>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e021      	b.n	8001cfe <I2C_Slave_ISR_DMA+0x5e>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d009      	beq.n	8001cde <I2C_Slave_ISR_DMA+0x3e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001cd0:	d005      	beq.n	8001cde <I2C_Slave_ISR_DMA+0x3e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	0011      	movs	r1, r2
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f000 fa2f 	bl	800213c <I2C_ITSlaveCplt>
//  {
//    /* Nothing to do */
//  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2240      	movs	r2, #64	; 0x40
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	5499      	strb	r1, [r3, r2]
  if(hi2c->transmit_or_receive==1)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2254      	movs	r2, #84	; 0x54
 8001cea:	5c9b      	ldrb	r3, [r3, r2]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <I2C_Slave_ISR_DMA+0x5c>
  HAL_I2C_Slave_Receive_DMA(hi2c,buffer_rx , 1);
 8001cf0:	4905      	ldr	r1, [pc, #20]	; (8001d08 <I2C_Slave_ISR_DMA+0x68>)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7ff fb90 	bl	800141c <HAL_I2C_Slave_Receive_DMA>
//  else
//	  I2C_ITSlaveCplt(hi2c, ITFlags);
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b004      	add	sp, #16
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	20000080 	.word	0x20000080

08001d0c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d0c:	b5b0      	push	{r4, r5, r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2241      	movs	r2, #65	; 0x41
 8001d1a:	5c9b      	ldrb	r3, [r3, r2]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	001a      	movs	r2, r3
 8001d20:	2328      	movs	r3, #40	; 0x28
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b28      	cmp	r3, #40	; 0x28
 8001d26:	d000      	beq.n	8001d2a <I2C_ITAddrCplt+0x1e>
 8001d28:	e088      	b.n	8001e3c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	250f      	movs	r5, #15
 8001d36:	197b      	adds	r3, r7, r5
 8001d38:	2101      	movs	r1, #1
 8001d3a:	400a      	ands	r2, r1
 8001d3c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	200c      	movs	r0, #12
 8001d4a:	183b      	adds	r3, r7, r0
 8001d4c:	21fe      	movs	r1, #254	; 0xfe
 8001d4e:	400a      	ands	r2, r1
 8001d50:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	240a      	movs	r4, #10
 8001d5c:	193b      	adds	r3, r7, r4
 8001d5e:	0592      	lsls	r2, r2, #22
 8001d60:	0d92      	lsrs	r2, r2, #22
 8001d62:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	21fe      	movs	r1, #254	; 0xfe
 8001d72:	400a      	ands	r2, r1
 8001d74:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d148      	bne.n	8001e10 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001d7e:	0021      	movs	r1, r4
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	09db      	lsrs	r3, r3, #7
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	183b      	adds	r3, r7, r0
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	4053      	eors	r3, r2
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	001a      	movs	r2, r3
 8001d92:	2306      	movs	r3, #6
 8001d94:	4013      	ands	r3, r2
 8001d96:	d120      	bne.n	8001dda <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001d98:	183b      	adds	r3, r7, r0
 8001d9a:	187a      	adds	r2, r7, r1
 8001d9c:	8812      	ldrh	r2, [r2, #0]
 8001d9e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d14c      	bne.n	8001e4c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2240      	movs	r2, #64	; 0x40
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001dc8:	183b      	adds	r3, r7, r0
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	197b      	adds	r3, r7, r5
 8001dce:	7819      	ldrb	r1, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f7ff fc14 	bl	8001600 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001dd8:	e038      	b.n	8001e4c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001dda:	240c      	movs	r4, #12
 8001ddc:	193b      	adds	r3, r7, r4
 8001dde:	2208      	movs	r2, #8
 8001de0:	18ba      	adds	r2, r7, r2
 8001de2:	8812      	ldrh	r2, [r2, #0]
 8001de4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	021a      	lsls	r2, r3, #8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0011      	movs	r1, r2
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 fd52 	bl	8002898 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2240      	movs	r2, #64	; 0x40
 8001df8:	2100      	movs	r1, #0
 8001dfa:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001dfc:	193b      	adds	r3, r7, r4
 8001dfe:	881a      	ldrh	r2, [r3, #0]
 8001e00:	230f      	movs	r3, #15
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	7819      	ldrb	r1, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f7ff fbf9 	bl	8001600 <HAL_I2C_AddrCallback>
}
 8001e0e:	e01d      	b.n	8001e4c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	021a      	lsls	r2, r3, #8
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	0011      	movs	r1, r2
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f000 fd3d 	bl	8002898 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2240      	movs	r2, #64	; 0x40
 8001e22:	2100      	movs	r1, #0
 8001e24:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e26:	230c      	movs	r3, #12
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	881a      	ldrh	r2, [r3, #0]
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	7819      	ldrb	r1, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff fbe3 	bl	8001600 <HAL_I2C_AddrCallback>
}
 8001e3a:	e007      	b.n	8001e4c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2208      	movs	r2, #8
 8001e42:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2240      	movs	r2, #64	; 0x40
 8001e48:	2100      	movs	r1, #0
 8001e4a:	5499      	strb	r1, [r3, r2]
}
 8001e4c:	46c0      	nop			; (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b004      	add	sp, #16
 8001e52:	bdb0      	pop	{r4, r5, r7, pc}

08001e54 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2242      	movs	r2, #66	; 0x42
 8001e60:	2100      	movs	r1, #0
 8001e62:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2241      	movs	r2, #65	; 0x41
 8001e68:	5c9b      	ldrb	r3, [r3, r2]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b21      	cmp	r3, #33	; 0x21
 8001e6e:	d117      	bne.n	8001ea0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2241      	movs	r2, #65	; 0x41
 8001e74:	2120      	movs	r1, #32
 8001e76:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2211      	movs	r2, #17
 8001e7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2101      	movs	r1, #1
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 fd05 	bl	8002898 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2240      	movs	r2, #64	; 0x40
 8001e92:	2100      	movs	r1, #0
 8001e94:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff fb99 	bl	80015d0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e9e:	e016      	b.n	8001ece <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2241      	movs	r2, #65	; 0x41
 8001ea4:	2120      	movs	r1, #32
 8001ea6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2212      	movs	r2, #18
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f000 fced 	bl	8002898 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2240      	movs	r2, #64	; 0x40
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff fb89 	bl	80015e0 <HAL_I2C_MasterRxCpltCallback>
}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b002      	add	sp, #8
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2242      	movs	r2, #66	; 0x42
 8001eec:	2100      	movs	r1, #0
 8001eee:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	01db      	lsls	r3, r3, #7
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d008      	beq.n	8001f0c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4924      	ldr	r1, [pc, #144]	; (8001f98 <I2C_ITSlaveSeqCplt+0xc0>)
 8001f06:	400a      	ands	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	e00c      	b.n	8001f26 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	4013      	ands	r3, r2
 8001f14:	d007      	beq.n	8001f26 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	491e      	ldr	r1, [pc, #120]	; (8001f9c <I2C_ITSlaveSeqCplt+0xc4>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2241      	movs	r2, #65	; 0x41
 8001f2a:	5c9b      	ldrb	r3, [r3, r2]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b29      	cmp	r3, #41	; 0x29
 8001f30:	d114      	bne.n	8001f5c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2241      	movs	r2, #65	; 0x41
 8001f36:	2128      	movs	r1, #40	; 0x28
 8001f38:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2221      	movs	r2, #33	; 0x21
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2101      	movs	r1, #1
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 fca7 	bl	8002898 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2240      	movs	r2, #64	; 0x40
 8001f4e:	2100      	movs	r1, #0
 8001f50:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff fb4b 	bl	80015f0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001f5a:	e019      	b.n	8001f90 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2241      	movs	r2, #65	; 0x41
 8001f60:	5c9b      	ldrb	r3, [r3, r2]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b2a      	cmp	r3, #42	; 0x2a
 8001f66:	d113      	bne.n	8001f90 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2241      	movs	r2, #65	; 0x41
 8001f6c:	2128      	movs	r1, #40	; 0x28
 8001f6e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2222      	movs	r2, #34	; 0x22
 8001f74:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2102      	movs	r1, #2
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f000 fc8c 	bl	8002898 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2240      	movs	r2, #64	; 0x40
 8001f84:	2100      	movs	r1, #0
 8001f86:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f7fe f960 	bl	8000250 <HAL_I2C_SlaveRxCpltCallback>
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b004      	add	sp, #16
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	ffffbfff 	.word	0xffffbfff
 8001f9c:	ffff7fff 	.word	0xffff7fff

08001fa0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2241      	movs	r2, #65	; 0x41
 8001fba:	5c9b      	ldrb	r3, [r3, r2]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b21      	cmp	r3, #33	; 0x21
 8001fc0:	d108      	bne.n	8001fd4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f000 fc66 	bl	8002898 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2211      	movs	r2, #17
 8001fd0:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd2:	e00d      	b.n	8001ff0 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2241      	movs	r2, #65	; 0x41
 8001fd8:	5c9b      	ldrb	r3, [r3, r2]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b22      	cmp	r3, #34	; 0x22
 8001fde:	d107      	bne.n	8001ff0 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f000 fc57 	bl	8002898 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2212      	movs	r2, #18
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	494e      	ldr	r1, [pc, #312]	; (8002134 <I2C_ITMasterCplt+0x194>)
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4b      	ldr	r2, [pc, #300]	; (8002138 <I2C_ITMasterCplt+0x198>)
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2210      	movs	r2, #16
 8002010:	4013      	ands	r3, r2
 8002012:	d009      	beq.n	8002028 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2210      	movs	r2, #16
 800201a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	2204      	movs	r2, #4
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2241      	movs	r2, #65	; 0x41
 800202c:	5c9b      	ldrb	r3, [r3, r2]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b60      	cmp	r3, #96	; 0x60
 8002032:	d109      	bne.n	8002048 <I2C_ITMasterCplt+0xa8>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2204      	movs	r2, #4
 8002038:	4013      	ands	r3, r2
 800203a:	d005      	beq.n	8002048 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	b2db      	uxtb	r3, r3
 8002044:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002046:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	0018      	movs	r0, r3
 800204c:	f000 fab5 	bl	80025ba <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2241      	movs	r2, #65	; 0x41
 800205a:	5c9b      	ldrb	r3, [r3, r2]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b60      	cmp	r3, #96	; 0x60
 8002060:	d002      	beq.n	8002068 <I2C_ITMasterCplt+0xc8>
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d007      	beq.n	8002078 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	0011      	movs	r1, r2
 8002070:	0018      	movs	r0, r3
 8002072:	f000 f977 	bl	8002364 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002076:	e058      	b.n	800212a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2241      	movs	r2, #65	; 0x41
 800207c:	5c9b      	ldrb	r3, [r3, r2]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b21      	cmp	r3, #33	; 0x21
 8002082:	d126      	bne.n	80020d2 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2241      	movs	r2, #65	; 0x41
 8002088:	2120      	movs	r1, #32
 800208a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2242      	movs	r2, #66	; 0x42
 8002096:	5c9b      	ldrb	r3, [r3, r2]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b40      	cmp	r3, #64	; 0x40
 800209c:	d10c      	bne.n	80020b8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2242      	movs	r2, #66	; 0x42
 80020a2:	2100      	movs	r1, #0
 80020a4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2240      	movs	r2, #64	; 0x40
 80020aa:	2100      	movs	r1, #0
 80020ac:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff fabd 	bl	8001630 <HAL_I2C_MemTxCpltCallback>
}
 80020b6:	e038      	b.n	800212a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2242      	movs	r2, #66	; 0x42
 80020bc:	2100      	movs	r1, #0
 80020be:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2240      	movs	r2, #64	; 0x40
 80020c4:	2100      	movs	r1, #0
 80020c6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7ff fa80 	bl	80015d0 <HAL_I2C_MasterTxCpltCallback>
}
 80020d0:	e02b      	b.n	800212a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2241      	movs	r2, #65	; 0x41
 80020d6:	5c9b      	ldrb	r3, [r3, r2]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b22      	cmp	r3, #34	; 0x22
 80020dc:	d125      	bne.n	800212a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2241      	movs	r2, #65	; 0x41
 80020e2:	2120      	movs	r1, #32
 80020e4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2242      	movs	r2, #66	; 0x42
 80020f0:	5c9b      	ldrb	r3, [r3, r2]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b40      	cmp	r3, #64	; 0x40
 80020f6:	d10c      	bne.n	8002112 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2242      	movs	r2, #66	; 0x42
 80020fc:	2100      	movs	r1, #0
 80020fe:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2240      	movs	r2, #64	; 0x40
 8002104:	2100      	movs	r1, #0
 8002106:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	0018      	movs	r0, r3
 800210c:	f7ff fa98 	bl	8001640 <HAL_I2C_MemRxCpltCallback>
}
 8002110:	e00b      	b.n	800212a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2242      	movs	r2, #66	; 0x42
 8002116:	2100      	movs	r1, #0
 8002118:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2240      	movs	r2, #64	; 0x40
 800211e:	2100      	movs	r1, #0
 8002120:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0018      	movs	r0, r3
 8002126:	f7ff fa5b 	bl	80015e0 <HAL_I2C_MasterRxCpltCallback>
}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b006      	add	sp, #24
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	fe00e800 	.word	0xfe00e800
 8002138:	ffff0000 	.word	0xffff0000

0800213c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	613b      	str	r3, [r7, #16]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002152:	200f      	movs	r0, #15
 8002154:	183b      	adds	r3, r7, r0
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	2141      	movs	r1, #65	; 0x41
 800215a:	5c52      	ldrb	r2, [r2, r1]
 800215c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2220      	movs	r2, #32
 8002164:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002166:	183b      	adds	r3, r7, r0
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b21      	cmp	r3, #33	; 0x21
 800216c:	d003      	beq.n	8002176 <I2C_ITSlaveCplt+0x3a>
 800216e:	183b      	adds	r3, r7, r0
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b29      	cmp	r3, #41	; 0x29
 8002174:	d109      	bne.n	800218a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002176:	4a4a      	ldr	r2, [pc, #296]	; (80022a0 <I2C_ITSlaveCplt+0x164>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	0011      	movs	r1, r2
 800217c:	0018      	movs	r0, r3
 800217e:	f000 fb8b 	bl	8002898 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2221      	movs	r2, #33	; 0x21
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
 8002188:	e011      	b.n	80021ae <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800218a:	220f      	movs	r2, #15
 800218c:	18bb      	adds	r3, r7, r2
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b22      	cmp	r3, #34	; 0x22
 8002192:	d003      	beq.n	800219c <I2C_ITSlaveCplt+0x60>
 8002194:	18bb      	adds	r3, r7, r2
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b2a      	cmp	r3, #42	; 0x2a
 800219a:	d108      	bne.n	80021ae <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800219c:	4a41      	ldr	r2, [pc, #260]	; (80022a4 <I2C_ITSlaveCplt+0x168>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0011      	movs	r1, r2
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 fb78 	bl	8002898 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2222      	movs	r2, #34	; 0x22
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2180      	movs	r1, #128	; 0x80
 80021ba:	0209      	lsls	r1, r1, #8
 80021bc:	430a      	orrs	r2, r1
 80021be:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4937      	ldr	r1, [pc, #220]	; (80022a8 <I2C_ITSlaveCplt+0x16c>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
//  I2C_Flush_TXDR(hi2c);

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	01db      	lsls	r3, r3, #7
 80021d6:	4013      	ands	r3, r2
 80021d8:	d013      	beq.n	8002202 <I2C_ITSlaveCplt+0xc6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4931      	ldr	r1, [pc, #196]	; (80022ac <I2C_ITSlaveCplt+0x170>)
 80021e6:	400a      	ands	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01f      	beq.n	8002232 <I2C_ITSlaveCplt+0xf6>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002200:	e017      	b.n	8002232 <I2C_ITSlaveCplt+0xf6>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	4013      	ands	r3, r2
 800220a:	d012      	beq.n	8002232 <I2C_ITSlaveCplt+0xf6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4926      	ldr	r1, [pc, #152]	; (80022b0 <I2C_ITSlaveCplt+0x174>)
 8002218:	400a      	ands	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d006      	beq.n	8002232 <I2C_ITSlaveCplt+0xf6>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	b29a      	uxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	855a      	strh	r2, [r3, #42]	; 0x2a
//      hi2c->XferCount--;
//    }
//  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <I2C_ITSlaveCplt+0x10c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	2204      	movs	r2, #4
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2242      	movs	r2, #66	; 0x42
 800224c:	2100      	movs	r1, #0
 800224e:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <I2C_ITSlaveCplt+0x132>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0011      	movs	r1, r2
 8002266:	0018      	movs	r0, r3
 8002268:	f000 f87c 	bl	8002364 <I2C_ITError>
//    hi2c->SlaveTxCpltCallback(hi2c);
#else
//    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
//  	}
}
 800226c:	e014      	b.n	8002298 <I2C_ITSlaveCplt+0x15c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2241      	movs	r2, #65	; 0x41
 8002272:	5c9b      	ldrb	r3, [r3, r2]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b22      	cmp	r3, #34	; 0x22
 8002278:	d10e      	bne.n	8002298 <I2C_ITSlaveCplt+0x15c>
    hi2c->State = HAL_I2C_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2241      	movs	r2, #65	; 0x41
 800227e:	2120      	movs	r1, #32
 8002280:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	2100      	movs	r1, #0
 800228e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	0018      	movs	r0, r3
 8002294:	f7fd ffdc 	bl	8000250 <HAL_I2C_SlaveRxCpltCallback>
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b006      	add	sp, #24
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	00008001 	.word	0x00008001
 80022a4:	00008002 	.word	0x00008002
 80022a8:	fe00e800 	.word	0xfe00e800
 80022ac:	ffffbfff 	.word	0xffffbfff
 80022b0:	ffff7fff 	.word	0xffff7fff

080022b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a26      	ldr	r2, [pc, #152]	; (800235c <I2C_ITListenCplt+0xa8>)
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2241      	movs	r2, #65	; 0x41
 80022ce:	2120      	movs	r1, #32
 80022d0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2242      	movs	r2, #66	; 0x42
 80022d6:	2100      	movs	r1, #0
 80022d8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2204      	movs	r2, #4
 80022e4:	4013      	ands	r3, r2
 80022e6:	d022      	beq.n	800232e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002304:	2b00      	cmp	r3, #0
 8002306:	d012      	beq.n	800232e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	2204      	movs	r2, #4
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800232e:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <I2C_ITListenCplt+0xac>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	0011      	movs	r1, r2
 8002334:	0018      	movs	r0, r3
 8002336:	f000 faaf 	bl	8002898 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2210      	movs	r2, #16
 8002340:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2240      	movs	r2, #64	; 0x40
 8002346:	2100      	movs	r1, #0
 8002348:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0018      	movs	r0, r3
 800234e:	f7ff f967 	bl	8001620 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b002      	add	sp, #8
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	ffff0000 	.word	0xffff0000
 8002360:	00008003 	.word	0x00008003

08002364 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800236e:	200f      	movs	r0, #15
 8002370:	183b      	adds	r3, r7, r0
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	2141      	movs	r1, #65	; 0x41
 8002376:	5c52      	ldrb	r2, [r2, r1]
 8002378:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2242      	movs	r2, #66	; 0x42
 800237e:	2100      	movs	r1, #0
 8002380:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a72      	ldr	r2, [pc, #456]	; (8002550 <I2C_ITError+0x1ec>)
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800239a:	183b      	adds	r3, r7, r0
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b28      	cmp	r3, #40	; 0x28
 80023a0:	d007      	beq.n	80023b2 <I2C_ITError+0x4e>
 80023a2:	183b      	adds	r3, r7, r0
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b29      	cmp	r3, #41	; 0x29
 80023a8:	d003      	beq.n	80023b2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80023aa:	183b      	adds	r3, r7, r0
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b2a      	cmp	r3, #42	; 0x2a
 80023b0:	d10c      	bne.n	80023cc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2103      	movs	r1, #3
 80023b6:	0018      	movs	r0, r3
 80023b8:	f000 fa6e 	bl	8002898 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2241      	movs	r2, #65	; 0x41
 80023c0:	2128      	movs	r1, #40	; 0x28
 80023c2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a63      	ldr	r2, [pc, #396]	; (8002554 <I2C_ITError+0x1f0>)
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34
 80023ca:	e032      	b.n	8002432 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80023cc:	4a62      	ldr	r2, [pc, #392]	; (8002558 <I2C_ITError+0x1f4>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0011      	movs	r1, r2
 80023d2:	0018      	movs	r0, r3
 80023d4:	f000 fa60 	bl	8002898 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	0018      	movs	r0, r3
 80023dc:	f000 f8ed 	bl	80025ba <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2241      	movs	r2, #65	; 0x41
 80023e4:	5c9b      	ldrb	r3, [r3, r2]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b60      	cmp	r3, #96	; 0x60
 80023ea:	d01f      	beq.n	800242c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2241      	movs	r2, #65	; 0x41
 80023f0:	2120      	movs	r1, #32
 80023f2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2220      	movs	r2, #32
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d114      	bne.n	800242c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2210      	movs	r2, #16
 800240a:	4013      	ands	r3, r2
 800240c:	2b10      	cmp	r3, #16
 800240e:	d109      	bne.n	8002424 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2210      	movs	r2, #16
 8002416:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	2204      	movs	r2, #4
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2220      	movs	r2, #32
 800242a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	2b00      	cmp	r3, #0
 800243e:	d03b      	beq.n	80024b8 <I2C_ITError+0x154>
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b11      	cmp	r3, #17
 8002444:	d002      	beq.n	800244c <I2C_ITError+0xe8>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b21      	cmp	r3, #33	; 0x21
 800244a:	d135      	bne.n	80024b8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	01db      	lsls	r3, r3, #7
 8002456:	401a      	ands	r2, r3
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	01db      	lsls	r3, r3, #7
 800245c:	429a      	cmp	r2, r3
 800245e:	d107      	bne.n	8002470 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	493c      	ldr	r1, [pc, #240]	; (800255c <I2C_ITError+0x1f8>)
 800246c:	400a      	ands	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	0018      	movs	r0, r3
 8002476:	f7fe fc5a 	bl	8000d2e <HAL_DMA_GetState>
 800247a:	0003      	movs	r3, r0
 800247c:	2b01      	cmp	r3, #1
 800247e:	d016      	beq.n	80024ae <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	4a36      	ldr	r2, [pc, #216]	; (8002560 <I2C_ITError+0x1fc>)
 8002486:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2240      	movs	r2, #64	; 0x40
 800248c:	2100      	movs	r1, #0
 800248e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	0018      	movs	r0, r3
 8002496:	f7fe fb63 	bl	8000b60 <HAL_DMA_Abort_IT>
 800249a:	1e03      	subs	r3, r0, #0
 800249c:	d051      	beq.n	8002542 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	0018      	movs	r0, r3
 80024aa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80024ac:	e049      	b.n	8002542 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f000 f859 	bl	8002568 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80024b6:	e044      	b.n	8002542 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d03b      	beq.n	8002538 <I2C_ITError+0x1d4>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b12      	cmp	r3, #18
 80024c4:	d002      	beq.n	80024cc <I2C_ITError+0x168>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b22      	cmp	r3, #34	; 0x22
 80024ca:	d135      	bne.n	8002538 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	401a      	ands	r2, r3
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	491e      	ldr	r1, [pc, #120]	; (8002564 <I2C_ITError+0x200>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7fe fc1a 	bl	8000d2e <HAL_DMA_GetState>
 80024fa:	0003      	movs	r3, r0
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d016      	beq.n	800252e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	4a16      	ldr	r2, [pc, #88]	; (8002560 <I2C_ITError+0x1fc>)
 8002506:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2240      	movs	r2, #64	; 0x40
 800250c:	2100      	movs	r1, #0
 800250e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	0018      	movs	r0, r3
 8002516:	f7fe fb23 	bl	8000b60 <HAL_DMA_Abort_IT>
 800251a:	1e03      	subs	r3, r0, #0
 800251c:	d013      	beq.n	8002546 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002528:	0018      	movs	r0, r3
 800252a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800252c:	e00b      	b.n	8002546 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 f819 	bl	8002568 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002536:	e006      	b.n	8002546 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	0018      	movs	r0, r3
 800253c:	f000 f814 	bl	8002568 <I2C_TreatErrorCallback>
  }
}
 8002540:	e002      	b.n	8002548 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	e000      	b.n	8002548 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002546:	46c0      	nop			; (mov r8, r8)
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b004      	add	sp, #16
 800254e:	bd80      	pop	{r7, pc}
 8002550:	ffff0000 	.word	0xffff0000
 8002554:	08001671 	.word	0x08001671
 8002558:	00008003 	.word	0x00008003
 800255c:	ffffbfff 	.word	0xffffbfff
 8002560:	080026cb 	.word	0x080026cb
 8002564:	ffff7fff 	.word	0xffff7fff

08002568 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2241      	movs	r2, #65	; 0x41
 8002574:	5c9b      	ldrb	r3, [r3, r2]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b60      	cmp	r3, #96	; 0x60
 800257a:	d10f      	bne.n	800259c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2241      	movs	r2, #65	; 0x41
 8002580:	2120      	movs	r1, #32
 8002582:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2240      	movs	r2, #64	; 0x40
 800258e:	2100      	movs	r1, #0
 8002590:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0018      	movs	r0, r3
 8002596:	f7ff f863 	bl	8001660 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800259a:	e00a      	b.n	80025b2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2240      	movs	r2, #64	; 0x40
 80025a6:	2100      	movs	r1, #0
 80025a8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff f84f 	bl	8001650 <HAL_I2C_ErrorCallback>
}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b002      	add	sp, #8
 80025b8:	bd80      	pop	{r7, pc}

080025ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2202      	movs	r2, #2
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d103      	bne.n	80025d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2200      	movs	r2, #0
 80025d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2201      	movs	r2, #1
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d007      	beq.n	80025f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699a      	ldr	r2, [r3, #24]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	430a      	orrs	r2, r1
 80025f4:	619a      	str	r2, [r3, #24]
  }
}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b002      	add	sp, #8
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002612:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	045b      	lsls	r3, r3, #17
 800261a:	429a      	cmp	r2, r3
 800261c:	d002      	beq.n	8002624 <I2C_DMASlaveTransmitCplt+0x24>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10b      	bne.n	800263c <I2C_DMASlaveTransmitCplt+0x3c>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4905      	ldr	r1, [pc, #20]	; (8002644 <I2C_DMASlaveTransmitCplt+0x44>)
 8002630:	400a      	ands	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	0018      	movs	r0, r3
 8002638:	f7ff fc4e 	bl	8001ed8 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b004      	add	sp, #16
 8002642:	bd80      	pop	{r7, pc}
 8002644:	ffffbfff 	.word	0xffffbfff

08002648 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10f      	bne.n	8002688 <I2C_DMASlaveReceiveCplt+0x40>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <I2C_DMASlaveReceiveCplt+0x48>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00b      	beq.n	8002688 <I2C_DMASlaveReceiveCplt+0x40>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4906      	ldr	r1, [pc, #24]	; (8002694 <I2C_DMASlaveReceiveCplt+0x4c>)
 800267c:	400a      	ands	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	0018      	movs	r0, r3
 8002684:	f7ff fc28 	bl	8001ed8 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b004      	add	sp, #16
 800268e:	bd80      	pop	{r7, pc}
 8002690:	ffff0000 	.word	0xffff0000
 8002694:	ffff7fff 	.word	0xffff7fff

08002698 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	0209      	lsls	r1, r1, #8
 80026b4:	430a      	orrs	r2, r1
 80026b6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2110      	movs	r1, #16
 80026bc:	0018      	movs	r0, r3
 80026be:	f7ff fe51 	bl	8002364 <I2C_ITError>
}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b004      	add	sp, #16
 80026c8:	bd80      	pop	{r7, pc}

080026ca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	2200      	movs	r2, #0
 80026e6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f4:	2200      	movs	r2, #0
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	0018      	movs	r0, r3
 80026fc:	f7ff ff34 	bl	8002568 <I2C_TreatErrorCallback>
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b004      	add	sp, #16
 8002706:	bd80      	pop	{r7, pc}

08002708 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	0008      	movs	r0, r1
 8002712:	0011      	movs	r1, r2
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	240a      	movs	r4, #10
 8002718:	193b      	adds	r3, r7, r4
 800271a:	1c02      	adds	r2, r0, #0
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	2009      	movs	r0, #9
 8002720:	183b      	adds	r3, r7, r0
 8002722:	1c0a      	adds	r2, r1, #0
 8002724:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002726:	193b      	adds	r3, r7, r4
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	059b      	lsls	r3, r3, #22
 800272c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800272e:	183b      	adds	r3, r7, r0
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	0419      	lsls	r1, r3, #16
 8002734:	23ff      	movs	r3, #255	; 0xff
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800273a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	4313      	orrs	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002752:	0d51      	lsrs	r1, r2, #21
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	00d2      	lsls	r2, r2, #3
 8002758:	400a      	ands	r2, r1
 800275a:	4907      	ldr	r1, [pc, #28]	; (8002778 <I2C_TransferConfig+0x70>)
 800275c:	430a      	orrs	r2, r1
 800275e:	43d2      	mvns	r2, r2
 8002760:	401a      	ands	r2, r3
 8002762:	0011      	movs	r1, r2
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b007      	add	sp, #28
 8002774:	bd90      	pop	{r4, r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	03ff63ff 	.word	0x03ff63ff

0800277c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	000a      	movs	r2, r1
 8002786:	1cbb      	adds	r3, r7, #2
 8002788:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002792:	4b3e      	ldr	r3, [pc, #248]	; (800288c <I2C_Enable_IRQ+0x110>)
 8002794:	429a      	cmp	r2, r3
 8002796:	d035      	beq.n	8002804 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800279c:	4b3c      	ldr	r3, [pc, #240]	; (8002890 <I2C_Enable_IRQ+0x114>)
 800279e:	429a      	cmp	r2, r3
 80027a0:	d030      	beq.n	8002804 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80027a6:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <I2C_Enable_IRQ+0x118>)
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d02b      	beq.n	8002804 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027ac:	1cbb      	adds	r3, r7, #2
 80027ae:	2200      	movs	r2, #0
 80027b0:	5e9b      	ldrsh	r3, [r3, r2]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da03      	bge.n	80027be <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	22b8      	movs	r2, #184	; 0xb8
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80027be:	1cbb      	adds	r3, r7, #2
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	2201      	movs	r2, #1
 80027c4:	4013      	ands	r3, r2
 80027c6:	d003      	beq.n	80027d0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	22f2      	movs	r2, #242	; 0xf2
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80027d0:	1cbb      	adds	r3, r7, #2
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	2202      	movs	r2, #2
 80027d6:	4013      	ands	r3, r2
 80027d8:	d003      	beq.n	80027e2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	22f4      	movs	r2, #244	; 0xf4
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80027e2:	1cbb      	adds	r3, r7, #2
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	2b10      	cmp	r3, #16
 80027e8:	d103      	bne.n	80027f2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2290      	movs	r2, #144	; 0x90
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027f2:	1cbb      	adds	r3, r7, #2
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d13c      	bne.n	8002874 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002802:	e037      	b.n	8002874 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002804:	1cbb      	adds	r3, r7, #2
 8002806:	2200      	movs	r2, #0
 8002808:	5e9b      	ldrsh	r3, [r3, r2]
 800280a:	2b00      	cmp	r3, #0
 800280c:	da03      	bge.n	8002816 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	22b8      	movs	r2, #184	; 0xb8
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002816:	1cbb      	adds	r3, r7, #2
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	2201      	movs	r2, #1
 800281c:	4013      	ands	r3, r2
 800281e:	d003      	beq.n	8002828 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	22f2      	movs	r2, #242	; 0xf2
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002828:	1cbb      	adds	r3, r7, #2
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	2202      	movs	r2, #2
 800282e:	4013      	ands	r3, r2
 8002830:	d003      	beq.n	800283a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	22f4      	movs	r2, #244	; 0xf4
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800283a:	1cbb      	adds	r3, r7, #2
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	2b10      	cmp	r3, #16
 8002840:	d103      	bne.n	800284a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2290      	movs	r2, #144	; 0x90
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800284a:	1cbb      	adds	r3, r7, #2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	2b20      	cmp	r3, #32
 8002850:	d103      	bne.n	800285a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2260      	movs	r2, #96	; 0x60
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <I2C_Enable_IRQ+0x118>)
 8002860:	429a      	cmp	r2, r3
 8002862:	d007      	beq.n	8002874 <I2C_Enable_IRQ+0xf8>
 8002864:	1cbb      	adds	r3, r7, #2
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	2b40      	cmp	r3, #64	; 0x40
 800286a:	d103      	bne.n	8002874 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2240      	movs	r2, #64	; 0x40
 8002870:	4313      	orrs	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6819      	ldr	r1, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]
}
 8002884:	46c0      	nop			; (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	b004      	add	sp, #16
 800288a:	bd80      	pop	{r7, pc}
 800288c:	08001871 	.word	0x08001871
 8002890:	08001ca1 	.word	0x08001ca1
 8002894:	08001a69 	.word	0x08001a69

08002898 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	000a      	movs	r2, r1
 80028a2:	1cbb      	adds	r3, r7, #2
 80028a4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80028aa:	1cbb      	adds	r3, r7, #2
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	2201      	movs	r2, #1
 80028b0:	4013      	ands	r3, r2
 80028b2:	d010      	beq.n	80028d6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2242      	movs	r2, #66	; 0x42
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2241      	movs	r2, #65	; 0x41
 80028c0:	5c9b      	ldrb	r3, [r3, r2]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	001a      	movs	r2, r3
 80028c6:	2328      	movs	r3, #40	; 0x28
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b28      	cmp	r3, #40	; 0x28
 80028cc:	d003      	beq.n	80028d6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	22b0      	movs	r2, #176	; 0xb0
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80028d6:	1cbb      	adds	r3, r7, #2
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	2202      	movs	r2, #2
 80028dc:	4013      	ands	r3, r2
 80028de:	d010      	beq.n	8002902 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2244      	movs	r2, #68	; 0x44
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2241      	movs	r2, #65	; 0x41
 80028ec:	5c9b      	ldrb	r3, [r3, r2]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	001a      	movs	r2, r3
 80028f2:	2328      	movs	r3, #40	; 0x28
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b28      	cmp	r3, #40	; 0x28
 80028f8:	d003      	beq.n	8002902 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	22b0      	movs	r2, #176	; 0xb0
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002902:	1cbb      	adds	r3, r7, #2
 8002904:	2200      	movs	r2, #0
 8002906:	5e9b      	ldrsh	r3, [r3, r2]
 8002908:	2b00      	cmp	r3, #0
 800290a:	da03      	bge.n	8002914 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	22b8      	movs	r2, #184	; 0xb8
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002914:	1cbb      	adds	r3, r7, #2
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	2b10      	cmp	r3, #16
 800291a:	d103      	bne.n	8002924 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2290      	movs	r2, #144	; 0x90
 8002920:	4313      	orrs	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002924:	1cbb      	adds	r3, r7, #2
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	2b20      	cmp	r3, #32
 800292a:	d103      	bne.n	8002934 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002934:	1cbb      	adds	r3, r7, #2
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	d103      	bne.n	8002944 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2240      	movs	r2, #64	; 0x40
 8002940:	4313      	orrs	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	43d9      	mvns	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	400a      	ands	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	46bd      	mov	sp, r7
 800295a:	b004      	add	sp, #16
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2241      	movs	r2, #65	; 0x41
 800296e:	5c9b      	ldrb	r3, [r3, r2]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b20      	cmp	r3, #32
 8002974:	d138      	bne.n	80029e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2240      	movs	r2, #64	; 0x40
 800297a:	5c9b      	ldrb	r3, [r3, r2]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002980:	2302      	movs	r3, #2
 8002982:	e032      	b.n	80029ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2240      	movs	r2, #64	; 0x40
 8002988:	2101      	movs	r1, #1
 800298a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2241      	movs	r2, #65	; 0x41
 8002990:	2124      	movs	r1, #36	; 0x24
 8002992:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2101      	movs	r1, #1
 80029a0:	438a      	bics	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4911      	ldr	r1, [pc, #68]	; (80029f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80029b0:	400a      	ands	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2101      	movs	r1, #1
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2241      	movs	r2, #65	; 0x41
 80029d8:	2120      	movs	r1, #32
 80029da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2240      	movs	r2, #64	; 0x40
 80029e0:	2100      	movs	r1, #0
 80029e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e000      	b.n	80029ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029e8:	2302      	movs	r3, #2
  }
}
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	ffffefff 	.word	0xffffefff

080029f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2241      	movs	r2, #65	; 0x41
 8002a06:	5c9b      	ldrb	r3, [r3, r2]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d139      	bne.n	8002a82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2240      	movs	r2, #64	; 0x40
 8002a12:	5c9b      	ldrb	r3, [r3, r2]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e033      	b.n	8002a84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2240      	movs	r2, #64	; 0x40
 8002a20:	2101      	movs	r1, #1
 8002a22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2241      	movs	r2, #65	; 0x41
 8002a28:	2124      	movs	r1, #36	; 0x24
 8002a2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2101      	movs	r1, #1
 8002a38:	438a      	bics	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4a11      	ldr	r2, [pc, #68]	; (8002a8c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2241      	movs	r2, #65	; 0x41
 8002a72:	2120      	movs	r1, #32
 8002a74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2240      	movs	r2, #64	; 0x40
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e000      	b.n	8002a84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a82:	2302      	movs	r3, #2
  }
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b004      	add	sp, #16
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	fffff0ff 	.word	0xfffff0ff

08002a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e305      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d100      	bne.n	8002aae <HAL_RCC_OscConfig+0x1e>
 8002aac:	e08d      	b.n	8002bca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002aae:	4bc5      	ldr	r3, [pc, #788]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d00e      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aba:	4bc2      	ldr	r3, [pc, #776]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	220c      	movs	r2, #12
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d116      	bne.n	8002af4 <HAL_RCC_OscConfig+0x64>
 8002ac6:	4bbf      	ldr	r3, [pc, #764]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	23c0      	movs	r3, #192	; 0xc0
 8002acc:	025b      	lsls	r3, r3, #9
 8002ace:	401a      	ands	r2, r3
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	025b      	lsls	r3, r3, #9
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d10d      	bne.n	8002af4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	4bba      	ldr	r3, [pc, #744]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	029b      	lsls	r3, r3, #10
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d100      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x56>
 8002ae4:	e070      	b.n	8002bc8 <HAL_RCC_OscConfig+0x138>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d000      	beq.n	8002af0 <HAL_RCC_OscConfig+0x60>
 8002aee:	e06b      	b.n	8002bc8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e2dc      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_OscConfig+0x7c>
 8002afc:	4bb1      	ldr	r3, [pc, #708]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4bb0      	ldr	r3, [pc, #704]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	0249      	lsls	r1, r1, #9
 8002b06:	430a      	orrs	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e02f      	b.n	8002b6c <HAL_RCC_OscConfig+0xdc>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10c      	bne.n	8002b2e <HAL_RCC_OscConfig+0x9e>
 8002b14:	4bab      	ldr	r3, [pc, #684]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4baa      	ldr	r3, [pc, #680]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002b1a:	49ab      	ldr	r1, [pc, #684]	; (8002dc8 <HAL_RCC_OscConfig+0x338>)
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	4ba8      	ldr	r3, [pc, #672]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4ba7      	ldr	r3, [pc, #668]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002b26:	49a9      	ldr	r1, [pc, #676]	; (8002dcc <HAL_RCC_OscConfig+0x33c>)
 8002b28:	400a      	ands	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	e01e      	b.n	8002b6c <HAL_RCC_OscConfig+0xdc>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	d10e      	bne.n	8002b54 <HAL_RCC_OscConfig+0xc4>
 8002b36:	4ba3      	ldr	r3, [pc, #652]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4ba2      	ldr	r3, [pc, #648]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	02c9      	lsls	r1, r1, #11
 8002b40:	430a      	orrs	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	4b9f      	ldr	r3, [pc, #636]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b9e      	ldr	r3, [pc, #632]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002b4a:	2180      	movs	r1, #128	; 0x80
 8002b4c:	0249      	lsls	r1, r1, #9
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0xdc>
 8002b54:	4b9b      	ldr	r3, [pc, #620]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b9a      	ldr	r3, [pc, #616]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002b5a:	499b      	ldr	r1, [pc, #620]	; (8002dc8 <HAL_RCC_OscConfig+0x338>)
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	4b98      	ldr	r3, [pc, #608]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b97      	ldr	r3, [pc, #604]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002b66:	4999      	ldr	r1, [pc, #612]	; (8002dcc <HAL_RCC_OscConfig+0x33c>)
 8002b68:	400a      	ands	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d014      	beq.n	8002b9e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fd fe5e 	bl	8000834 <HAL_GetTick>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b7e:	f7fd fe59 	bl	8000834 <HAL_GetTick>
 8002b82:	0002      	movs	r2, r0
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b64      	cmp	r3, #100	; 0x64
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e28e      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b90:	4b8c      	ldr	r3, [pc, #560]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	029b      	lsls	r3, r3, #10
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0xee>
 8002b9c:	e015      	b.n	8002bca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7fd fe49 	bl	8000834 <HAL_GetTick>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fd fe44 	bl	8000834 <HAL_GetTick>
 8002bac:	0002      	movs	r2, r0
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e279      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	4b82      	ldr	r3, [pc, #520]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	029b      	lsls	r3, r3, #10
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x118>
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d100      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x146>
 8002bd4:	e06c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bd6:	4b7b      	ldr	r3, [pc, #492]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	220c      	movs	r2, #12
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d00e      	beq.n	8002bfe <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002be0:	4b78      	ldr	r3, [pc, #480]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	220c      	movs	r2, #12
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d11f      	bne.n	8002c2c <HAL_RCC_OscConfig+0x19c>
 8002bec:	4b75      	ldr	r3, [pc, #468]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	23c0      	movs	r3, #192	; 0xc0
 8002bf2:	025b      	lsls	r3, r3, #9
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d116      	bne.n	8002c2c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	4b71      	ldr	r3, [pc, #452]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2202      	movs	r2, #2
 8002c04:	4013      	ands	r3, r2
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_OscConfig+0x184>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e24c      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c14:	4b6b      	ldr	r3, [pc, #428]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	22f8      	movs	r2, #248	; 0xf8
 8002c1a:	4393      	bics	r3, r2
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	00da      	lsls	r2, r3, #3
 8002c24:	4b67      	ldr	r3, [pc, #412]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002c26:	430a      	orrs	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2a:	e041      	b.n	8002cb0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d024      	beq.n	8002c7e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c34:	4b63      	ldr	r3, [pc, #396]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b62      	ldr	r3, [pc, #392]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fd fdf8 	bl	8000834 <HAL_GetTick>
 8002c44:	0003      	movs	r3, r0
 8002c46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7fd fdf3 	bl	8000834 <HAL_GetTick>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e228      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5c:	4b59      	ldr	r3, [pc, #356]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2202      	movs	r2, #2
 8002c62:	4013      	ands	r3, r2
 8002c64:	d0f1      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c66:	4b57      	ldr	r3, [pc, #348]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	22f8      	movs	r2, #248	; 0xf8
 8002c6c:	4393      	bics	r3, r2
 8002c6e:	0019      	movs	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	00da      	lsls	r2, r3, #3
 8002c76:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e018      	b.n	8002cb0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c7e:	4b51      	ldr	r3, [pc, #324]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b50      	ldr	r3, [pc, #320]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002c84:	2101      	movs	r1, #1
 8002c86:	438a      	bics	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8a:	f7fd fdd3 	bl	8000834 <HAL_GetTick>
 8002c8e:	0003      	movs	r3, r0
 8002c90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c94:	f7fd fdce 	bl	8000834 <HAL_GetTick>
 8002c98:	0002      	movs	r2, r0
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e203      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2202      	movs	r2, #2
 8002cac:	4013      	ands	r3, r2
 8002cae:	d1f1      	bne.n	8002c94 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d036      	beq.n	8002d28 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d019      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc2:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002cc8:	2101      	movs	r1, #1
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cce:	f7fd fdb1 	bl	8000834 <HAL_GetTick>
 8002cd2:	0003      	movs	r3, r0
 8002cd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd8:	f7fd fdac 	bl	8000834 <HAL_GetTick>
 8002cdc:	0002      	movs	r2, r0
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e1e1      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	2202      	movs	r2, #2
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d0f1      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x248>
 8002cf4:	e018      	b.n	8002d28 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf6:	4b33      	ldr	r3, [pc, #204]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cfa:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	438a      	bics	r2, r1
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7fd fd97 	bl	8000834 <HAL_GetTick>
 8002d06:	0003      	movs	r3, r0
 8002d08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7fd fd92 	bl	8000834 <HAL_GetTick>
 8002d10:	0002      	movs	r2, r0
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e1c7      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1e:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2202      	movs	r2, #2
 8002d24:	4013      	ands	r3, r2
 8002d26:	d1f1      	bne.n	8002d0c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d100      	bne.n	8002d34 <HAL_RCC_OscConfig+0x2a4>
 8002d32:	e0b5      	b.n	8002ea0 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d34:	201f      	movs	r0, #31
 8002d36:	183b      	adds	r3, r7, r0
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3c:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002d3e:	69da      	ldr	r2, [r3, #28]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	055b      	lsls	r3, r3, #21
 8002d44:	4013      	ands	r3, r2
 8002d46:	d110      	bne.n	8002d6a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002d4e:	2180      	movs	r1, #128	; 0x80
 8002d50:	0549      	lsls	r1, r1, #21
 8002d52:	430a      	orrs	r2, r1
 8002d54:	61da      	str	r2, [r3, #28]
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002d58:	69da      	ldr	r2, [r3, #28]
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	055b      	lsls	r3, r3, #21
 8002d5e:	4013      	ands	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d64:	183b      	adds	r3, r7, r0
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_RCC_OscConfig+0x340>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4013      	ands	r3, r2
 8002d74:	d11a      	bne.n	8002dac <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d76:	4b16      	ldr	r3, [pc, #88]	; (8002dd0 <HAL_RCC_OscConfig+0x340>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <HAL_RCC_OscConfig+0x340>)
 8002d7c:	2180      	movs	r1, #128	; 0x80
 8002d7e:	0049      	lsls	r1, r1, #1
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d84:	f7fd fd56 	bl	8000834 <HAL_GetTick>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8e:	f7fd fd51 	bl	8000834 <HAL_GetTick>
 8002d92:	0002      	movs	r2, r0
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b64      	cmp	r3, #100	; 0x64
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e186      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_RCC_OscConfig+0x340>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10f      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x344>
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	4b02      	ldr	r3, [pc, #8]	; (8002dc4 <HAL_RCC_OscConfig+0x334>)
 8002dba:	2101      	movs	r1, #1
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	621a      	str	r2, [r3, #32]
 8002dc0:	e036      	b.n	8002e30 <HAL_RCC_OscConfig+0x3a0>
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	fffeffff 	.word	0xfffeffff
 8002dcc:	fffbffff 	.word	0xfffbffff
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCC_OscConfig+0x366>
 8002ddc:	4bb6      	ldr	r3, [pc, #728]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002dde:	6a1a      	ldr	r2, [r3, #32]
 8002de0:	4bb5      	ldr	r3, [pc, #724]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	438a      	bics	r2, r1
 8002de6:	621a      	str	r2, [r3, #32]
 8002de8:	4bb3      	ldr	r3, [pc, #716]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002dea:	6a1a      	ldr	r2, [r3, #32]
 8002dec:	4bb2      	ldr	r3, [pc, #712]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002dee:	2104      	movs	r1, #4
 8002df0:	438a      	bics	r2, r1
 8002df2:	621a      	str	r2, [r3, #32]
 8002df4:	e01c      	b.n	8002e30 <HAL_RCC_OscConfig+0x3a0>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x388>
 8002dfe:	4bae      	ldr	r3, [pc, #696]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002e00:	6a1a      	ldr	r2, [r3, #32]
 8002e02:	4bad      	ldr	r3, [pc, #692]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002e04:	2104      	movs	r1, #4
 8002e06:	430a      	orrs	r2, r1
 8002e08:	621a      	str	r2, [r3, #32]
 8002e0a:	4bab      	ldr	r3, [pc, #684]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002e0c:	6a1a      	ldr	r2, [r3, #32]
 8002e0e:	4baa      	ldr	r3, [pc, #680]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002e10:	2101      	movs	r1, #1
 8002e12:	430a      	orrs	r2, r1
 8002e14:	621a      	str	r2, [r3, #32]
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0x3a0>
 8002e18:	4ba7      	ldr	r3, [pc, #668]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002e1a:	6a1a      	ldr	r2, [r3, #32]
 8002e1c:	4ba6      	ldr	r3, [pc, #664]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002e1e:	2101      	movs	r1, #1
 8002e20:	438a      	bics	r2, r1
 8002e22:	621a      	str	r2, [r3, #32]
 8002e24:	4ba4      	ldr	r3, [pc, #656]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	4ba3      	ldr	r3, [pc, #652]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002e2a:	2104      	movs	r1, #4
 8002e2c:	438a      	bics	r2, r1
 8002e2e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d014      	beq.n	8002e62 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e38:	f7fd fcfc 	bl	8000834 <HAL_GetTick>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	e009      	b.n	8002e56 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f7fd fcf7 	bl	8000834 <HAL_GetTick>
 8002e46:	0002      	movs	r2, r0
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	4a9b      	ldr	r2, [pc, #620]	; (80030bc <HAL_RCC_OscConfig+0x62c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e12b      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e56:	4b98      	ldr	r3, [pc, #608]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x3b2>
 8002e60:	e013      	b.n	8002e8a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e62:	f7fd fce7 	bl	8000834 <HAL_GetTick>
 8002e66:	0003      	movs	r3, r0
 8002e68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6a:	e009      	b.n	8002e80 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7fd fce2 	bl	8000834 <HAL_GetTick>
 8002e70:	0002      	movs	r2, r0
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	4a91      	ldr	r2, [pc, #580]	; (80030bc <HAL_RCC_OscConfig+0x62c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e116      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e80:	4b8d      	ldr	r3, [pc, #564]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	2202      	movs	r2, #2
 8002e86:	4013      	ands	r3, r2
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e8a:	231f      	movs	r3, #31
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e94:	4b88      	ldr	r3, [pc, #544]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	4b87      	ldr	r3, [pc, #540]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002e9a:	4989      	ldr	r1, [pc, #548]	; (80030c0 <HAL_RCC_OscConfig+0x630>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2210      	movs	r2, #16
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d063      	beq.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d12a      	bne.n	8002f08 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002eb2:	4b81      	ldr	r3, [pc, #516]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb6:	4b80      	ldr	r3, [pc, #512]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002eb8:	2104      	movs	r1, #4
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002ebe:	4b7e      	ldr	r3, [pc, #504]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec2:	4b7d      	ldr	r3, [pc, #500]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7fd fcb3 	bl	8000834 <HAL_GetTick>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ed4:	f7fd fcae 	bl	8000834 <HAL_GetTick>
 8002ed8:	0002      	movs	r2, r0
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e0e3      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ee6:	4b74      	ldr	r3, [pc, #464]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eea:	2202      	movs	r2, #2
 8002eec:	4013      	ands	r3, r2
 8002eee:	d0f1      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ef0:	4b71      	ldr	r3, [pc, #452]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef4:	22f8      	movs	r2, #248	; 0xf8
 8002ef6:	4393      	bics	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	00da      	lsls	r2, r3, #3
 8002f00:	4b6d      	ldr	r3, [pc, #436]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f02:	430a      	orrs	r2, r1
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34
 8002f06:	e034      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	3305      	adds	r3, #5
 8002f0e:	d111      	bne.n	8002f34 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002f10:	4b69      	ldr	r3, [pc, #420]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f14:	4b68      	ldr	r3, [pc, #416]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f16:	2104      	movs	r1, #4
 8002f18:	438a      	bics	r2, r1
 8002f1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f1c:	4b66      	ldr	r3, [pc, #408]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f20:	22f8      	movs	r2, #248	; 0xf8
 8002f22:	4393      	bics	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	00da      	lsls	r2, r3, #3
 8002f2c:	4b62      	ldr	r3, [pc, #392]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	635a      	str	r2, [r3, #52]	; 0x34
 8002f32:	e01e      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f34:	4b60      	ldr	r3, [pc, #384]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f38:	4b5f      	ldr	r3, [pc, #380]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f3a:	2104      	movs	r1, #4
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002f40:	4b5d      	ldr	r3, [pc, #372]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f44:	4b5c      	ldr	r3, [pc, #368]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f46:	2101      	movs	r1, #1
 8002f48:	438a      	bics	r2, r1
 8002f4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4c:	f7fd fc72 	bl	8000834 <HAL_GetTick>
 8002f50:	0003      	movs	r3, r0
 8002f52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f56:	f7fd fc6d 	bl	8000834 <HAL_GetTick>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0a2      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f68:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d1f1      	bne.n	8002f56 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d100      	bne.n	8002f7c <HAL_RCC_OscConfig+0x4ec>
 8002f7a:	e097      	b.n	80030ac <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f7c:	4b4e      	ldr	r3, [pc, #312]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	220c      	movs	r2, #12
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d100      	bne.n	8002f8a <HAL_RCC_OscConfig+0x4fa>
 8002f88:	e06b      	b.n	8003062 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d14c      	bne.n	800302c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b49      	ldr	r3, [pc, #292]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b48      	ldr	r3, [pc, #288]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f98:	494a      	ldr	r1, [pc, #296]	; (80030c4 <HAL_RCC_OscConfig+0x634>)
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7fd fc49 	bl	8000834 <HAL_GetTick>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fd fc44 	bl	8000834 <HAL_GetTick>
 8002fac:	0002      	movs	r2, r0
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e079      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fba:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	049b      	lsls	r3, r3, #18
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc6:	4b3c      	ldr	r3, [pc, #240]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	220f      	movs	r2, #15
 8002fcc:	4393      	bics	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd4:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fda:	4b37      	ldr	r3, [pc, #220]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4a3a      	ldr	r2, [pc, #232]	; (80030c8 <HAL_RCC_OscConfig+0x638>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	431a      	orrs	r2, r3
 8002fee:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b30      	ldr	r3, [pc, #192]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b2f      	ldr	r3, [pc, #188]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002ffa:	2180      	movs	r1, #128	; 0x80
 8002ffc:	0449      	lsls	r1, r1, #17
 8002ffe:	430a      	orrs	r2, r1
 8003000:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003002:	f7fd fc17 	bl	8000834 <HAL_GetTick>
 8003006:	0003      	movs	r3, r0
 8003008:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300c:	f7fd fc12 	bl	8000834 <HAL_GetTick>
 8003010:	0002      	movs	r2, r0
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e047      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800301e:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	049b      	lsls	r3, r3, #18
 8003026:	4013      	ands	r3, r2
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x57c>
 800302a:	e03f      	b.n	80030ac <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302c:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8003032:	4924      	ldr	r1, [pc, #144]	; (80030c4 <HAL_RCC_OscConfig+0x634>)
 8003034:	400a      	ands	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fd fbfc 	bl	8000834 <HAL_GetTick>
 800303c:	0003      	movs	r3, r0
 800303e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003042:	f7fd fbf7 	bl	8000834 <HAL_GetTick>
 8003046:	0002      	movs	r2, r0
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e02c      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003054:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	049b      	lsls	r3, r3, #18
 800305c:	4013      	ands	r3, r2
 800305e:	d1f0      	bne.n	8003042 <HAL_RCC_OscConfig+0x5b2>
 8003060:	e024      	b.n	80030ac <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e01f      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003074:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	23c0      	movs	r3, #192	; 0xc0
 800307e:	025b      	lsls	r3, r3, #9
 8003080:	401a      	ands	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	429a      	cmp	r2, r3
 8003088:	d10e      	bne.n	80030a8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	220f      	movs	r2, #15
 800308e:	401a      	ands	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	23f0      	movs	r3, #240	; 0xf0
 800309c:	039b      	lsls	r3, r3, #14
 800309e:	401a      	ands	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b008      	add	sp, #32
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	40021000 	.word	0x40021000
 80030bc:	00001388 	.word	0x00001388
 80030c0:	efffffff 	.word	0xefffffff
 80030c4:	feffffff 	.word	0xfeffffff
 80030c8:	ffc27fff 	.word	0xffc27fff

080030cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0b3      	b.n	8003248 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e0:	4b5b      	ldr	r3, [pc, #364]	; (8003250 <HAL_RCC_ClockConfig+0x184>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2201      	movs	r2, #1
 80030e6:	4013      	ands	r3, r2
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d911      	bls.n	8003112 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b58      	ldr	r3, [pc, #352]	; (8003250 <HAL_RCC_ClockConfig+0x184>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2201      	movs	r2, #1
 80030f4:	4393      	bics	r3, r2
 80030f6:	0019      	movs	r1, r3
 80030f8:	4b55      	ldr	r3, [pc, #340]	; (8003250 <HAL_RCC_ClockConfig+0x184>)
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003100:	4b53      	ldr	r3, [pc, #332]	; (8003250 <HAL_RCC_ClockConfig+0x184>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	4013      	ands	r3, r2
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d001      	beq.n	8003112 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e09a      	b.n	8003248 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2202      	movs	r2, #2
 8003118:	4013      	ands	r3, r2
 800311a:	d015      	beq.n	8003148 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2204      	movs	r2, #4
 8003122:	4013      	ands	r3, r2
 8003124:	d006      	beq.n	8003134 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003126:	4b4b      	ldr	r3, [pc, #300]	; (8003254 <HAL_RCC_ClockConfig+0x188>)
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <HAL_RCC_ClockConfig+0x188>)
 800312c:	21e0      	movs	r1, #224	; 0xe0
 800312e:	00c9      	lsls	r1, r1, #3
 8003130:	430a      	orrs	r2, r1
 8003132:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003134:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_RCC_ClockConfig+0x188>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	22f0      	movs	r2, #240	; 0xf0
 800313a:	4393      	bics	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	4b44      	ldr	r3, [pc, #272]	; (8003254 <HAL_RCC_ClockConfig+0x188>)
 8003144:	430a      	orrs	r2, r1
 8003146:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2201      	movs	r2, #1
 800314e:	4013      	ands	r3, r2
 8003150:	d040      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <HAL_RCC_ClockConfig+0x188>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	029b      	lsls	r3, r3, #10
 8003162:	4013      	ands	r3, r2
 8003164:	d114      	bne.n	8003190 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e06e      	b.n	8003248 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	4b38      	ldr	r3, [pc, #224]	; (8003254 <HAL_RCC_ClockConfig+0x188>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	049b      	lsls	r3, r3, #18
 800317a:	4013      	ands	r3, r2
 800317c:	d108      	bne.n	8003190 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e062      	b.n	8003248 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003182:	4b34      	ldr	r3, [pc, #208]	; (8003254 <HAL_RCC_ClockConfig+0x188>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2202      	movs	r2, #2
 8003188:	4013      	ands	r3, r2
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e05b      	b.n	8003248 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003190:	4b30      	ldr	r3, [pc, #192]	; (8003254 <HAL_RCC_ClockConfig+0x188>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2203      	movs	r2, #3
 8003196:	4393      	bics	r3, r2
 8003198:	0019      	movs	r1, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <HAL_RCC_ClockConfig+0x188>)
 80031a0:	430a      	orrs	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a4:	f7fd fb46 	bl	8000834 <HAL_GetTick>
 80031a8:	0003      	movs	r3, r0
 80031aa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ac:	e009      	b.n	80031c2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ae:	f7fd fb41 	bl	8000834 <HAL_GetTick>
 80031b2:	0002      	movs	r2, r0
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	4a27      	ldr	r2, [pc, #156]	; (8003258 <HAL_RCC_ClockConfig+0x18c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e042      	b.n	8003248 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	4b24      	ldr	r3, [pc, #144]	; (8003254 <HAL_RCC_ClockConfig+0x188>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	220c      	movs	r2, #12
 80031c8:	401a      	ands	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d1ec      	bne.n	80031ae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d4:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_RCC_ClockConfig+0x184>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2201      	movs	r2, #1
 80031da:	4013      	ands	r3, r2
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d211      	bcs.n	8003206 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_RCC_ClockConfig+0x184>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2201      	movs	r2, #1
 80031e8:	4393      	bics	r3, r2
 80031ea:	0019      	movs	r1, r3
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <HAL_RCC_ClockConfig+0x184>)
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f4:	4b16      	ldr	r3, [pc, #88]	; (8003250 <HAL_RCC_ClockConfig+0x184>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2201      	movs	r2, #1
 80031fa:	4013      	ands	r3, r2
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d001      	beq.n	8003206 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e020      	b.n	8003248 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2204      	movs	r2, #4
 800320c:	4013      	ands	r3, r2
 800320e:	d009      	beq.n	8003224 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003210:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_RCC_ClockConfig+0x188>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a11      	ldr	r2, [pc, #68]	; (800325c <HAL_RCC_ClockConfig+0x190>)
 8003216:	4013      	ands	r3, r2
 8003218:	0019      	movs	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <HAL_RCC_ClockConfig+0x188>)
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003224:	f000 f820 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8003228:	0001      	movs	r1, r0
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x188>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	220f      	movs	r2, #15
 8003232:	4013      	ands	r3, r2
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x194>)
 8003236:	5cd3      	ldrb	r3, [r2, r3]
 8003238:	000a      	movs	r2, r1
 800323a:	40da      	lsrs	r2, r3
 800323c:	4b09      	ldr	r3, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x198>)
 800323e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003240:	2003      	movs	r0, #3
 8003242:	f7fd fab1 	bl	80007a8 <HAL_InitTick>
  
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	b004      	add	sp, #16
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40022000 	.word	0x40022000
 8003254:	40021000 	.word	0x40021000
 8003258:	00001388 	.word	0x00001388
 800325c:	fffff8ff 	.word	0xfffff8ff
 8003260:	08003388 	.word	0x08003388
 8003264:	20000088 	.word	0x20000088

08003268 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	2300      	movs	r3, #0
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003282:	4b21      	ldr	r3, [pc, #132]	; (8003308 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	220c      	movs	r2, #12
 800328c:	4013      	ands	r3, r2
 800328e:	2b04      	cmp	r3, #4
 8003290:	d002      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x30>
 8003292:	2b08      	cmp	r3, #8
 8003294:	d003      	beq.n	800329e <HAL_RCC_GetSysClockFreq+0x36>
 8003296:	e02e      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003298:	4b1c      	ldr	r3, [pc, #112]	; (800330c <HAL_RCC_GetSysClockFreq+0xa4>)
 800329a:	613b      	str	r3, [r7, #16]
      break;
 800329c:	e02e      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	0c9b      	lsrs	r3, r3, #18
 80032a2:	220f      	movs	r2, #15
 80032a4:	4013      	ands	r3, r2
 80032a6:	4a1a      	ldr	r2, [pc, #104]	; (8003310 <HAL_RCC_GetSysClockFreq+0xa8>)
 80032a8:	5cd3      	ldrb	r3, [r2, r3]
 80032aa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80032ac:	4b16      	ldr	r3, [pc, #88]	; (8003308 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	220f      	movs	r2, #15
 80032b2:	4013      	ands	r3, r2
 80032b4:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_RCC_GetSysClockFreq+0xac>)
 80032b6:	5cd3      	ldrb	r3, [r2, r3]
 80032b8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	23c0      	movs	r3, #192	; 0xc0
 80032be:	025b      	lsls	r3, r3, #9
 80032c0:	401a      	ands	r2, r3
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	025b      	lsls	r3, r3, #9
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d109      	bne.n	80032de <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	480f      	ldr	r0, [pc, #60]	; (800330c <HAL_RCC_GetSysClockFreq+0xa4>)
 80032ce:	f7fc ff1b 	bl	8000108 <__udivsi3>
 80032d2:	0003      	movs	r3, r0
 80032d4:	001a      	movs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4353      	muls	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	480a      	ldr	r0, [pc, #40]	; (800330c <HAL_RCC_GetSysClockFreq+0xa4>)
 80032e2:	f7fc ff11 	bl	8000108 <__udivsi3>
 80032e6:	0003      	movs	r3, r0
 80032e8:	001a      	movs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4353      	muls	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	613b      	str	r3, [r7, #16]
      break;
 80032f4:	e002      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_RCC_GetSysClockFreq+0xa4>)
 80032f8:	613b      	str	r3, [r7, #16]
      break;
 80032fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80032fc:	693b      	ldr	r3, [r7, #16]
}
 80032fe:	0018      	movs	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b006      	add	sp, #24
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	40021000 	.word	0x40021000
 800330c:	007a1200 	.word	0x007a1200
 8003310:	08003398 	.word	0x08003398
 8003314:	080033a8 	.word	0x080033a8

08003318 <memset>:
 8003318:	0003      	movs	r3, r0
 800331a:	1882      	adds	r2, r0, r2
 800331c:	4293      	cmp	r3, r2
 800331e:	d100      	bne.n	8003322 <memset+0xa>
 8003320:	4770      	bx	lr
 8003322:	7019      	strb	r1, [r3, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	e7f9      	b.n	800331c <memset+0x4>

08003328 <__libc_init_array>:
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	2600      	movs	r6, #0
 800332c:	4c0c      	ldr	r4, [pc, #48]	; (8003360 <__libc_init_array+0x38>)
 800332e:	4d0d      	ldr	r5, [pc, #52]	; (8003364 <__libc_init_array+0x3c>)
 8003330:	1b64      	subs	r4, r4, r5
 8003332:	10a4      	asrs	r4, r4, #2
 8003334:	42a6      	cmp	r6, r4
 8003336:	d109      	bne.n	800334c <__libc_init_array+0x24>
 8003338:	2600      	movs	r6, #0
 800333a:	f000 f819 	bl	8003370 <_init>
 800333e:	4c0a      	ldr	r4, [pc, #40]	; (8003368 <__libc_init_array+0x40>)
 8003340:	4d0a      	ldr	r5, [pc, #40]	; (800336c <__libc_init_array+0x44>)
 8003342:	1b64      	subs	r4, r4, r5
 8003344:	10a4      	asrs	r4, r4, #2
 8003346:	42a6      	cmp	r6, r4
 8003348:	d105      	bne.n	8003356 <__libc_init_array+0x2e>
 800334a:	bd70      	pop	{r4, r5, r6, pc}
 800334c:	00b3      	lsls	r3, r6, #2
 800334e:	58eb      	ldr	r3, [r5, r3]
 8003350:	4798      	blx	r3
 8003352:	3601      	adds	r6, #1
 8003354:	e7ee      	b.n	8003334 <__libc_init_array+0xc>
 8003356:	00b3      	lsls	r3, r6, #2
 8003358:	58eb      	ldr	r3, [r5, r3]
 800335a:	4798      	blx	r3
 800335c:	3601      	adds	r6, #1
 800335e:	e7f2      	b.n	8003346 <__libc_init_array+0x1e>
 8003360:	080033b8 	.word	0x080033b8
 8003364:	080033b8 	.word	0x080033b8
 8003368:	080033bc 	.word	0x080033bc
 800336c:	080033b8 	.word	0x080033b8

08003370 <_init>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr

0800337c <_fini>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr
